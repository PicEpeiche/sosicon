
/* #line 1 "parser/parser_sosi_line.rl" */
/*
 *  This file is part of the command-line tool sosicon.
 *  Copyright (C) 2012  Espen Andersen
 *
 *  This is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "parser.h"
#pragma warning ( disable: 4244 )

namespace sosicon {

    //! \cond 
    
/* #line 28 "parser_sosi_line.cpp" */
static const char _parseSosiLine_actions[] = {
	0, 1, 0, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 2, 13, 26, 2, 26, 
	0, 2, 26, 1, 2, 26, 2, 2, 
	26, 20, 2, 26, 28, 2, 26, 35, 
	2, 26, 39, 2, 26, 41, 2, 26, 
	43, 2, 26, 46, 2, 26, 48, 2, 
	26, 49, 2, 26, 51, 2, 26, 54, 
	2, 43, 44, 2, 53, 26
};

static const short _parseSosiLine_key_offsets[] = {
	0, 0, 9, 15, 23, 30, 38, 47, 
	52, 59, 60, 64, 74, 92, 105, 113, 
	120, 127, 134, 140, 146, 152, 154, 159, 
	166, 173, 180, 187, 195, 202, 209, 216, 
	223, 230, 236, 244, 251, 258, 265, 271, 
	279, 286, 293, 300, 307, 314, 321, 328, 
	334, 342, 350, 356, 368, 375, 382, 389, 
	396, 402, 410, 418, 425, 432, 439, 445, 
	451, 459, 468, 477, 485, 494, 497, 502, 
	505, 511, 516, 519, 527, 534, 541, 548, 
	554, 560, 568, 577, 586, 594, 603, 606, 
	611, 614, 620, 625, 628, 636, 643, 650, 
	657, 664, 671, 678, 684, 690, 698, 707, 
	716, 724, 733, 736, 741, 744, 750, 755, 
	758, 766, 773, 780, 787, 794, 801, 808, 
	815, 822, 829, 836, 842, 848, 850, 858, 
	865, 872, 879, 885, 892, 899, 906, 909, 
	915, 922, 929, 936, 945, 952, 959, 966, 
	973, 979, 985, 992, 998, 1006, 1013, 1020, 
	1027, 1034, 1041, 1048, 1055, 1062, 1068, 1076, 
	1084, 1091, 1098, 1105, 1112, 1119, 1126, 1133, 
	1140, 1147, 1154, 1161, 1168, 1175, 1182, 1189, 
	1196, 1202, 1210, 1218, 1226, 1234, 1242, 1248, 
	1256, 1263, 1270, 1277, 1286, 1293, 1299, 1307, 
	1314, 1321, 1328, 1334, 1341, 1348, 1351, 1358, 
	1365, 1372, 1379, 1386, 1393, 1400, 1406, 1414, 
	1421, 1428, 1435, 1442, 1449, 1456, 1463, 1469, 
	1476, 1483, 1486, 1493, 1500, 1507, 1514, 1520, 
	1528, 1536, 1544, 1552, 1559, 1566, 1573, 1580, 
	1587, 1594, 1601, 1608, 1615, 1622, 1629, 1636, 
	1643, 1650, 1656, 1664, 1672, 1680, 1688, 1696, 
	1704, 1712, 1720, 1728, 1735, 1742, 1749, 1756, 
	1763, 1770, 1777, 1784, 1790, 1797, 1804, 1811, 
	1814, 1820, 1827, 1835, 1842, 1849, 1855, 1863, 
	1871, 1879, 1887, 1893, 1900, 1907, 1910, 1917, 
	1924, 1931, 1938, 1944, 1952, 1959, 1966, 1973, 
	1980, 1987, 1994, 2001, 2008, 2015, 2022, 2029, 
	2036, 2043, 2049, 2056, 2063, 2070, 2077, 2084, 
	2091, 2098, 2105, 2112, 2118, 2125, 2132, 2135, 
	2142, 2151, 2160, 2168, 2177, 2186, 2192, 2199, 
	2206, 2213, 2220, 2227, 2233, 2241, 2247, 2255, 
	2262, 2262, 2266, 2271, 2277, 2285, 2293, 2299, 
	2307, 2315, 2323, 2331, 2337, 2345, 2353, 2359, 
	2367, 2375, 2381, 2387, 2394, 2401, 2407, 2410, 
	2417, 2423, 2425, 2433, 2441, 2449, 2457, 2465, 
	2473, 2481, 2489, 2496, 2504, 2511, 2519, 2527, 
	2535, 2543, 2551, 2559, 2566, 2573, 2579, 2582, 
	2589, 2596, 2604, 2612, 2619, 2622, 2629, 2636, 
	2641, 2646, 2651, 2656, 2660, 2665, 2666, 2671, 
	2676, 2681, 2686, 2691, 2696, 2701, 2706, 2711, 
	2716, 2721, 2726, 2731, 2736, 2741, 2749, 2755, 
	2762, 2770
};

static const char _parseSosiLine_trans_keys[] = {
	32, 33, 40, 46, 58, 9, 13, 48, 
	57, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 40, 58, 9, 12, 10, 
	13, 32, 33, 58, 9, 12, 10, 13, 
	32, 33, 41, 58, 9, 12, 10, 13, 
	32, 33, 40, 41, 58, 9, 12, 10, 
	13, 40, 41, 58, 10, 13, 32, 40, 
	58, 9, 12, 58, 10, 13, 41, 58, 
	32, 33, 46, 70, 72, 75, 80, 84, 
	9, 13, 10, 13, 32, 33, 46, 65, 
	66, 71, 75, 77, 78, 79, 80, 82, 
	83, 84, 9, 12, 10, 13, 32, 33, 
	69, 75, 76, 77, 79, 80, 83, 9, 
	12, 10, 13, 32, 33, 78, 84, 9, 
	12, 10, 13, 32, 33, 72, 9, 12, 
	10, 13, 32, 33, 69, 9, 12, 10, 
	13, 32, 33, 84, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 10, 13, 32, 9, 12, 10, 
	13, 32, 33, 65, 9, 12, 10, 13, 
	32, 33, 83, 9, 12, 10, 13, 32, 
	33, 74, 9, 12, 10, 13, 32, 33, 
	69, 9, 12, 10, 13, 32, 33, 78, 
	80, 9, 12, 10, 13, 32, 33, 85, 
	9, 12, 10, 13, 32, 33, 77, 9, 
	12, 10, 13, 32, 33, 77, 9, 12, 
	10, 13, 32, 33, 69, 9, 12, 10, 
	13, 32, 33, 82, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	76, 9, 12, 10, 13, 32, 33, 65, 
	9, 12, 10, 13, 32, 33, 78, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 65, 90, 10, 
	13, 32, 33, 79, 9, 12, 10, 13, 
	32, 33, 79, 9, 12, 10, 13, 32, 
	33, 82, 9, 12, 10, 13, 32, 33, 
	68, 9, 12, 10, 13, 32, 33, 83, 
	9, 12, 10, 13, 32, 33, 89, 9, 
	12, 10, 13, 32, 33, 83, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 48, 57, 65, 90, 97, 122, 
	10, 13, 32, 33, 80, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 78, 9, 12, 10, 13, 32, 
	33, 82, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 65, 73, 
	9, 12, 10, 13, 32, 33, 88, 9, 
	12, 10, 13, 32, 33, 45, 9, 12, 
	10, 13, 32, 33, 78, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 46, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	46, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 46, 9, 12, 48, 57, 32, 9, 
	13, 32, 9, 13, 48, 57, 46, 48, 
	57, 32, 46, 9, 13, 48, 57, 32, 
	9, 13, 48, 57, 46, 48, 57, 10, 
	13, 32, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 78, 9, 12, 10, 13, 
	32, 33, 45, 9, 12, 10, 13, 32, 
	33, 78, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 46, 9, 12, 48, 
	57, 10, 13, 32, 33, 46, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 46, 9, 
	12, 48, 57, 32, 9, 13, 32, 9, 
	13, 48, 57, 46, 48, 57, 32, 46, 
	9, 13, 48, 57, 32, 9, 13, 48, 
	57, 46, 48, 57, 10, 13, 32, 46, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	82, 9, 12, 10, 13, 32, 33, 73, 
	9, 12, 10, 13, 32, 33, 71, 9, 
	12, 10, 13, 32, 33, 79, 9, 12, 
	10, 13, 32, 33, 45, 9, 12, 10, 
	13, 32, 33, 78, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 46, 9, 
	12, 48, 57, 10, 13, 32, 33, 46, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	46, 9, 12, 48, 57, 32, 9, 13, 
	32, 9, 13, 48, 57, 46, 48, 57, 
	32, 46, 9, 13, 48, 57, 32, 9, 
	13, 48, 57, 46, 48, 57, 10, 13, 
	32, 46, 9, 12, 48, 57, 10, 13, 
	32, 33, 82, 9, 12, 10, 13, 32, 
	33, 79, 9, 12, 10, 13, 32, 33, 
	68, 9, 12, 10, 13, 32, 33, 85, 
	9, 12, 10, 13, 32, 33, 75, 9, 
	12, 10, 13, 32, 33, 84, 9, 12, 
	10, 13, 32, 33, 83, 9, 12, 10, 
	13, 32, 33, 80, 9, 12, 10, 13, 
	32, 33, 69, 9, 12, 10, 13, 32, 
	33, 75, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 10, 13, 32, 33, 78, 83, 
	9, 12, 10, 13, 32, 33, 65, 9, 
	12, 10, 13, 32, 33, 86, 9, 12, 
	10, 13, 32, 33, 78, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 32, 33, 34, 
	9, 12, 10, 13, 34, 10, 13, 32, 
	34, 9, 12, 10, 13, 32, 33, 34, 
	9, 12, 10, 13, 32, 33, 82, 9, 
	12, 10, 13, 32, 33, 45, 9, 12, 
	10, 13, 32, 33, 70, 73, 83, 9, 
	12, 10, 13, 32, 33, 79, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 75, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 68, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 78, 9, 12, 10, 13, 32, 
	33, 82, 9, 12, 10, 13, 32, 33, 
	69, 9, 12, 10, 13, 32, 33, 71, 
	9, 12, 10, 13, 32, 33, 68, 9, 
	12, 10, 13, 32, 33, 65, 9, 12, 
	10, 13, 32, 33, 84, 9, 12, 10, 
	13, 32, 33, 79, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	68, 73, 9, 12, 10, 13, 32, 33, 
	82, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 83, 9, 
	12, 10, 13, 32, 33, 83, 9, 12, 
	10, 13, 32, 33, 69, 9, 12, 10, 
	13, 32, 33, 66, 9, 12, 10, 13, 
	32, 33, 82, 9, 12, 10, 13, 32, 
	33, 85, 9, 12, 10, 13, 32, 33, 
	75, 9, 12, 10, 13, 32, 33, 83, 
	9, 12, 10, 13, 32, 33, 69, 9, 
	12, 10, 13, 32, 33, 78, 9, 12, 
	10, 13, 32, 33, 72, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 84, 9, 12, 10, 13, 32, 
	33, 68, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	65, 90, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 89, 9, 12, 10, 
	13, 32, 33, 71, 9, 12, 10, 13, 
	32, 33, 71, 9, 12, 10, 13, 32, 
	33, 78, 83, 84, 9, 12, 10, 13, 
	32, 33, 82, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 84, 
	9, 12, 10, 13, 32, 33, 65, 9, 
	12, 10, 13, 32, 33, 84, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 34, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 89, 9, 12, 10, 13, 32, 
	33, 80, 9, 12, 10, 13, 32, 33, 
	95, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 66, 9, 
	12, 10, 13, 32, 33, 82, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 65, 9, 12, 10, 13, 32, 
	33, 84, 9, 12, 10, 13, 32, 33, 
	69, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 65, 9, 
	12, 10, 13, 32, 33, 86, 9, 12, 
	10, 13, 32, 33, 78, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 34, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 79, 9, 12, 10, 13, 32, 33, 
	77, 9, 12, 10, 13, 32, 33, 77, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 65, 9, 12, 10, 
	13, 32, 33, 84, 9, 12, 10, 13, 
	32, 33, 82, 9, 12, 10, 13, 32, 
	33, 73, 9, 12, 10, 13, 32, 33, 
	75, 9, 12, 10, 13, 32, 33, 75, 
	9, 12, 10, 13, 32, 33, 69, 9, 
	12, 10, 13, 32, 33, 76, 9, 12, 
	10, 13, 32, 33, 78, 9, 12, 10, 
	13, 32, 33, 85, 9, 12, 10, 13, 
	32, 33, 77, 9, 12, 10, 13, 32, 
	33, 77, 9, 12, 10, 13, 32, 33, 
	69, 9, 12, 10, 13, 32, 33, 82, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	-61, 10, 13, 32, 33, 9, 12, -104, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 66, 9, 12, 10, 13, 32, 
	33, 74, 9, 12, 10, 13, 32, 33, 
	84, 9, 12, 10, 13, 32, 33, 89, 
	9, 12, 10, 13, 32, 33, 80, 9, 
	12, 10, 13, 32, 33, 69, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 34, 10, 13, 
	32, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 32, 33, 79, 
	84, 9, 12, 10, 13, 32, 33, 83, 
	9, 12, 10, 13, 32, 33, 84, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 34, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 69, 9, 12, 10, 13, 32, 33, 
	77, 9, 12, 10, 13, 32, 33, 65, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 69, 9, 12, 10, 
	13, 32, 33, 70, 9, 12, 10, 13, 
	32, 33, 79, 9, 12, 10, 13, 32, 
	33, 83, 9, 12, 10, 13, 32, 33, 
	73, 9, 12, 10, 13, 32, 33, 45, 
	9, 12, 10, 13, 32, 33, 86, 9, 
	12, 10, 13, 32, 33, 69, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 83, 9, 12, 10, 13, 
	32, 33, 74, 9, 12, 10, 13, 32, 
	33, 79, 9, 12, 10, 13, 32, 33, 
	78, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 71, 9, 12, 10, 13, 32, 
	33, 78, 9, 12, 10, 13, 32, 33, 
	83, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 84, 9, 
	12, 10, 13, 32, 33, 84, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 34, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 46, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 46, 9, 12, 48, 
	57, 10, 13, 32, 33, 46, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 46, 9, 12, 10, 
	13, 32, 33, 46, 9, 12, 10, 13, 
	32, 33, 46, 9, 12, 10, 13, 32, 
	33, 75, 9, 12, 10, 13, 32, 33, 
	80, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 40, 58, 9, 12, 10, 
	13, 32, 40, 58, 9, 12, 32, 33, 
	9, 13, 10, 13, 32, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 65, 90, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 34, 
	9, 12, 10, 13, 32, 33, 34, 9, 
	12, 10, 13, 32, 34, 9, 12, 10, 
	13, 34, 10, 13, 32, 33, 34, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 65, 
	90, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	34, 9, 12, 10, 13, 34, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 34, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 32, 33, 76, 9, 
	13, 32, 33, 65, 9, 13, 32, 33, 
	84, 9, 13, 32, 33, 69, 9, 13, 
	32, 33, 9, 13, 32, 33, 58, 9, 
	13, 58, 32, 33, 79, 9, 13, 32, 
	33, 68, 9, 13, 32, 33, 69, 9, 
	13, 32, 33, 85, 9, 13, 32, 33, 
	82, 9, 13, 32, 33, 86, 9, 13, 
	32, 33, 69, 9, 13, 32, 33, 85, 
	9, 13, 32, 33, 78, 9, 13, 32, 
	33, 75, 9, 13, 32, 33, 84, 9, 
	13, 32, 33, 69, 9, 13, 32, 33, 
	75, 9, 13, 32, 33, 83, 9, 13, 
	32, 33, 84, 9, 13, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 46, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 0
};

static const char _parseSosiLine_single_lengths[] = {
	0, 5, 4, 6, 5, 6, 7, 5, 
	5, 1, 4, 8, 16, 11, 6, 5, 
	5, 5, 4, 4, 4, 2, 3, 5, 
	5, 5, 5, 6, 5, 5, 5, 5, 
	5, 4, 4, 5, 5, 5, 4, 4, 
	5, 5, 5, 5, 5, 5, 5, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	4, 4, 6, 5, 5, 5, 4, 4, 
	4, 5, 5, 4, 5, 1, 1, 1, 
	2, 1, 1, 4, 5, 5, 5, 4, 
	4, 4, 5, 5, 4, 5, 1, 1, 
	1, 2, 1, 1, 4, 5, 5, 5, 
	5, 5, 5, 4, 4, 4, 5, 5, 
	4, 5, 1, 1, 1, 2, 1, 1, 
	4, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 4, 4, 2, 6, 5, 
	5, 5, 4, 5, 5, 5, 3, 4, 
	5, 5, 5, 7, 5, 5, 5, 5, 
	4, 4, 5, 4, 4, 5, 5, 5, 
	5, 5, 5, 5, 5, 4, 4, 6, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	5, 5, 5, 7, 5, 4, 4, 5, 
	5, 5, 4, 5, 5, 3, 5, 5, 
	5, 5, 5, 5, 5, 4, 4, 5, 
	5, 5, 5, 5, 5, 5, 4, 5, 
	5, 3, 5, 5, 5, 5, 4, 4, 
	4, 4, 4, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 5, 5, 5, 5, 5, 
	5, 5, 5, 4, 5, 5, 5, 3, 
	4, 5, 6, 5, 5, 4, 4, 4, 
	4, 4, 4, 5, 5, 3, 5, 5, 
	5, 5, 4, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 4, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 4, 5, 5, 3, 5, 
	5, 5, 4, 5, 5, 4, 5, 5, 
	5, 5, 5, 4, 4, 4, 6, 5, 
	0, 2, 3, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 5, 5, 4, 3, 5, 
	4, 2, 4, 4, 4, 4, 4, 4, 
	4, 4, 5, 4, 5, 4, 4, 4, 
	4, 4, 4, 5, 5, 4, 3, 5, 
	5, 4, 4, 5, 3, 5, 5, 3, 
	3, 3, 3, 2, 3, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 4, 5, 
	4, 4
};

static const char _parseSosiLine_range_lengths[] = {
	0, 2, 1, 1, 1, 1, 1, 0, 
	1, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 1, 4, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	2, 2, 1, 2, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	1, 2, 2, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	0, 1, 1, 1, 2, 2, 1, 2, 
	2, 2, 2, 1, 2, 2, 1, 2, 
	2, 1, 1, 1, 1, 1, 0, 1, 
	1, 0, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 0, 1, 
	1, 2, 2, 1, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	2, 2
};

static const short _parseSosiLine_index_offsets[] = {
	0, 0, 8, 14, 22, 29, 37, 46, 
	52, 59, 61, 66, 76, 94, 107, 115, 
	122, 129, 136, 142, 148, 154, 157, 162, 
	169, 176, 183, 190, 198, 205, 212, 219, 
	226, 233, 239, 246, 253, 260, 267, 273, 
	280, 287, 294, 301, 308, 315, 322, 329, 
	335, 342, 349, 355, 364, 371, 378, 385, 
	392, 398, 405, 413, 420, 427, 434, 440, 
	446, 453, 461, 469, 476, 484, 487, 491, 
	494, 499, 503, 506, 513, 520, 527, 534, 
	540, 546, 553, 561, 569, 576, 584, 587, 
	591, 594, 599, 603, 606, 613, 620, 627, 
	634, 641, 648, 655, 661, 667, 674, 682, 
	690, 697, 705, 708, 712, 715, 720, 724, 
	727, 734, 741, 748, 755, 762, 769, 776, 
	783, 790, 797, 804, 810, 816, 819, 827, 
	834, 841, 848, 854, 861, 868, 875, 879, 
	885, 892, 899, 906, 915, 922, 929, 936, 
	943, 949, 955, 962, 968, 975, 982, 989, 
	996, 1003, 1010, 1017, 1024, 1031, 1037, 1044, 
	1052, 1059, 1066, 1073, 1080, 1087, 1094, 1101, 
	1108, 1115, 1122, 1129, 1136, 1143, 1150, 1157, 
	1164, 1170, 1177, 1184, 1191, 1198, 1205, 1211, 
	1218, 1225, 1232, 1239, 1248, 1255, 1261, 1268, 
	1275, 1282, 1289, 1295, 1302, 1309, 1313, 1320, 
	1327, 1334, 1341, 1348, 1355, 1362, 1368, 1375, 
	1382, 1389, 1396, 1403, 1410, 1417, 1424, 1430, 
	1437, 1444, 1448, 1455, 1462, 1469, 1476, 1482, 
	1489, 1496, 1503, 1510, 1517, 1524, 1531, 1538, 
	1545, 1552, 1559, 1566, 1573, 1580, 1587, 1594, 
	1601, 1608, 1614, 1621, 1628, 1635, 1642, 1649, 
	1656, 1663, 1670, 1677, 1684, 1691, 1698, 1705, 
	1712, 1719, 1726, 1733, 1739, 1746, 1753, 1760, 
	1764, 1770, 1777, 1785, 1792, 1799, 1805, 1812, 
	1819, 1826, 1833, 1839, 1846, 1853, 1857, 1864, 
	1871, 1878, 1885, 1891, 1898, 1905, 1912, 1919, 
	1926, 1933, 1940, 1947, 1954, 1961, 1968, 1975, 
	1982, 1989, 1995, 2002, 2009, 2016, 2023, 2030, 
	2037, 2044, 2051, 2058, 2064, 2071, 2078, 2082, 
	2089, 2097, 2105, 2112, 2120, 2128, 2134, 2141, 
	2148, 2155, 2162, 2169, 2175, 2182, 2188, 2196, 
	2203, 2204, 2208, 2213, 2219, 2226, 2233, 2239, 
	2246, 2253, 2260, 2267, 2273, 2280, 2287, 2293, 
	2300, 2307, 2313, 2319, 2326, 2333, 2339, 2343, 
	2350, 2356, 2359, 2366, 2373, 2380, 2387, 2394, 
	2401, 2408, 2415, 2422, 2429, 2436, 2443, 2450, 
	2457, 2464, 2471, 2478, 2485, 2492, 2498, 2502, 
	2509, 2516, 2523, 2530, 2537, 2541, 2548, 2555, 
	2560, 2565, 2570, 2575, 2579, 2584, 2586, 2591, 
	2596, 2601, 2606, 2611, 2616, 2621, 2626, 2631, 
	2636, 2641, 2646, 2651, 2656, 2661, 2668, 2674, 
	2681, 2688
};

static const short _parseSosiLine_indicies[] = {
	1, 2, 3, 4, 6, 1, 5, 0, 
	8, 8, 7, 9, 7, 0, 11, 11, 
	10, 9, 3, 6, 10, 0, 8, 8, 
	7, 9, 6, 7, 0, 8, 8, 13, 
	14, 0, 0, 13, 12, 11, 11, 13, 
	14, 15, 16, 6, 13, 12, 17, 17, 
	18, 19, 20, 14, 17, 17, 21, 22, 
	20, 21, 9, 20, 9, 9, 9, 9, 
	9, 14, 24, 25, 26, 27, 28, 29, 
	30, 31, 24, 23, 8, 8, 7, 9, 
	32, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 7, 0, 8, 8, 
	7, 9, 44, 45, 46, 47, 48, 49, 
	50, 7, 0, 8, 8, 7, 9, 51, 
	52, 7, 0, 8, 8, 7, 9, 53, 
	7, 0, 8, 8, 7, 9, 54, 7, 
	0, 8, 8, 7, 9, 55, 7, 0, 
	57, 57, 56, 9, 56, 0, 57, 57, 
	59, 60, 59, 58, 8, 8, 61, 60, 
	61, 58, 62, 62, 60, 62, 62, 63, 
	63, 9, 8, 8, 7, 9, 64, 7, 
	0, 8, 8, 7, 9, 65, 7, 0, 
	8, 8, 7, 9, 66, 7, 0, 8, 
	8, 7, 9, 67, 7, 0, 8, 8, 
	7, 9, 68, 69, 7, 0, 8, 8, 
	7, 9, 70, 7, 0, 8, 8, 7, 
	9, 71, 7, 0, 8, 8, 7, 9, 
	72, 7, 0, 8, 8, 7, 9, 73, 
	7, 0, 8, 8, 7, 9, 74, 7, 
	0, 76, 76, 75, 9, 75, 0, 8, 
	8, 7, 9, 7, 77, 0, 8, 8, 
	7, 9, 78, 7, 0, 8, 8, 7, 
	9, 79, 7, 0, 8, 8, 7, 9, 
	80, 7, 0, 82, 82, 81, 9, 81, 
	0, 8, 8, 7, 9, 7, 83, 0, 
	8, 8, 7, 9, 84, 7, 0, 8, 
	8, 7, 9, 85, 7, 0, 8, 8, 
	7, 9, 86, 7, 0, 8, 8, 7, 
	9, 87, 7, 0, 8, 8, 7, 9, 
	88, 7, 0, 8, 8, 7, 9, 89, 
	7, 0, 8, 8, 7, 9, 90, 7, 
	0, 92, 92, 91, 9, 91, 0, 8, 
	8, 7, 9, 7, 93, 0, 95, 95, 
	94, 9, 94, 93, 0, 95, 95, 94, 
	9, 94, 0, 8, 8, 7, 9, 7, 
	96, 96, 96, 0, 8, 8, 7, 9, 
	97, 7, 0, 8, 8, 7, 9, 98, 
	7, 0, 8, 8, 7, 9, 99, 7, 
	0, 8, 8, 7, 9, 100, 7, 0, 
	102, 102, 101, 9, 101, 0, 8, 8, 
	7, 9, 7, 103, 0, 8, 8, 7, 
	9, 104, 105, 7, 0, 8, 8, 7, 
	9, 106, 7, 0, 8, 8, 7, 9, 
	107, 7, 0, 8, 8, 7, 9, 108, 
	7, 0, 111, 111, 110, 112, 110, 109, 
	114, 114, 113, 9, 113, 0, 114, 114, 
	113, 9, 113, 115, 0, 8, 8, 7, 
	9, 116, 7, 116, 0, 118, 118, 117, 
	9, 116, 117, 116, 0, 118, 118, 117, 
	9, 117, 119, 0, 8, 8, 7, 9, 
	119, 7, 119, 0, 120, 120, 9, 120, 
	120, 121, 9, 122, 122, 9, 123, 122, 
	123, 122, 9, 123, 123, 124, 9, 125, 
	125, 9, 62, 62, 63, 125, 63, 125, 
	9, 8, 8, 7, 9, 126, 7, 0, 
	8, 8, 7, 9, 127, 7, 0, 8, 
	8, 7, 9, 128, 7, 0, 131, 131, 
	130, 132, 130, 129, 134, 134, 133, 9, 
	133, 0, 134, 134, 133, 9, 133, 135, 
	0, 8, 8, 7, 9, 136, 7, 136, 
	0, 138, 138, 137, 9, 136, 137, 136, 
	0, 138, 138, 137, 9, 137, 139, 0, 
	8, 8, 7, 9, 139, 7, 139, 0, 
	140, 140, 9, 140, 140, 141, 9, 142, 
	142, 9, 143, 142, 143, 142, 9, 143, 
	143, 144, 9, 145, 145, 9, 62, 62, 
	63, 145, 63, 145, 9, 8, 8, 7, 
	9, 146, 7, 0, 8, 8, 7, 9, 
	147, 7, 0, 8, 8, 7, 9, 148, 
	7, 0, 8, 8, 7, 9, 149, 7, 
	0, 8, 8, 7, 9, 150, 7, 0, 
	8, 8, 7, 9, 151, 7, 0, 154, 
	154, 153, 155, 153, 152, 157, 157, 156, 
	9, 156, 0, 157, 157, 156, 9, 156, 
	158, 0, 8, 8, 7, 9, 159, 7, 
	159, 0, 161, 161, 160, 9, 159, 160, 
	159, 0, 161, 161, 160, 9, 160, 162, 
	0, 8, 8, 7, 9, 162, 7, 162, 
	0, 163, 163, 9, 163, 163, 164, 9, 
	165, 165, 9, 166, 165, 166, 165, 9, 
	166, 166, 167, 9, 168, 168, 9, 62, 
	62, 63, 168, 63, 168, 9, 8, 8, 
	7, 9, 169, 7, 0, 8, 8, 7, 
	9, 170, 7, 0, 8, 8, 7, 9, 
	171, 7, 0, 8, 8, 7, 9, 172, 
	7, 0, 8, 8, 7, 9, 173, 7, 
	0, 8, 8, 7, 9, 174, 7, 0, 
	8, 8, 7, 9, 175, 7, 0, 8, 
	8, 7, 9, 176, 7, 0, 8, 8, 
	7, 9, 177, 7, 0, 8, 8, 7, 
	9, 178, 7, 0, 180, 180, 179, 9, 
	179, 0, 8, 8, 182, 183, 182, 181, 
	62, 62, 183, 8, 8, 7, 9, 184, 
	185, 7, 0, 8, 8, 7, 9, 186, 
	7, 0, 8, 8, 7, 9, 187, 7, 
	0, 8, 8, 7, 9, 188, 7, 0, 
	190, 190, 189, 9, 189, 0, 8, 8, 
	192, 193, 194, 192, 191, 195, 195, 192, 
	193, 196, 192, 191, 195, 195, 197, 9, 
	196, 197, 0, 198, 198, 199, 193, 198, 
	198, 200, 199, 200, 9, 8, 8, 192, 
	193, 0, 192, 191, 8, 8, 7, 9, 
	201, 7, 0, 8, 8, 7, 9, 202, 
	7, 0, 8, 8, 7, 9, 203, 204, 
	205, 7, 0, 8, 8, 7, 9, 206, 
	7, 0, 8, 8, 7, 9, 207, 7, 
	0, 8, 8, 7, 9, 208, 7, 0, 
	8, 8, 7, 9, 209, 7, 0, 211, 
	211, 210, 9, 210, 0, 8, 8, 213, 
	214, 213, 212, 8, 8, 7, 9, 215, 
	7, 0, 217, 217, 216, 9, 216, 0, 
	8, 8, 7, 9, 7, 218, 0, 8, 
	8, 7, 9, 219, 7, 0, 8, 8, 
	7, 9, 220, 7, 0, 8, 8, 7, 
	9, 221, 7, 0, 8, 8, 7, 9, 
	222, 7, 0, 8, 8, 7, 9, 223, 
	7, 0, 8, 8, 7, 9, 224, 7, 
	0, 8, 8, 7, 9, 225, 7, 0, 
	8, 8, 7, 9, 226, 7, 0, 228, 
	228, 227, 9, 227, 0, 8, 8, 7, 
	9, 7, 229, 0, 8, 8, 7, 9, 
	230, 231, 7, 0, 8, 8, 7, 9, 
	232, 7, 0, 8, 8, 7, 9, 233, 
	7, 0, 8, 8, 7, 9, 234, 7, 
	0, 8, 8, 7, 9, 235, 7, 0, 
	8, 8, 7, 9, 236, 7, 0, 8, 
	8, 7, 9, 237, 7, 0, 8, 8, 
	7, 9, 238, 7, 0, 8, 8, 7, 
	9, 239, 7, 0, 8, 8, 7, 9, 
	240, 7, 0, 8, 8, 7, 9, 241, 
	7, 0, 8, 8, 7, 9, 242, 7, 
	0, 8, 8, 7, 9, 243, 7, 0, 
	8, 8, 7, 9, 244, 7, 0, 8, 
	8, 7, 9, 245, 7, 0, 8, 8, 
	7, 9, 246, 7, 0, 8, 8, 7, 
	9, 247, 7, 0, 249, 249, 248, 9, 
	248, 0, 249, 249, 248, 9, 248, 250, 
	0, 252, 252, 251, 9, 251, 250, 0, 
	252, 252, 251, 9, 251, 253, 0, 255, 
	255, 254, 9, 254, 253, 0, 255, 255, 
	254, 9, 254, 256, 0, 258, 258, 257, 
	9, 257, 0, 258, 258, 257, 9, 257, 
	259, 0, 8, 8, 7, 9, 260, 7, 
	0, 8, 8, 7, 9, 261, 7, 0, 
	8, 8, 7, 9, 262, 7, 0, 8, 
	8, 7, 9, 263, 264, 265, 7, 0, 
	8, 8, 7, 9, 266, 7, 0, 268, 
	268, 267, 9, 267, 0, 8, 8, 7, 
	9, 7, 269, 0, 8, 8, 7, 9, 
	270, 7, 0, 8, 8, 7, 9, 271, 
	7, 0, 8, 8, 7, 9, 272, 7, 
	0, 274, 274, 273, 9, 273, 0, 8, 
	8, 276, 277, 278, 276, 275, 195, 195, 
	276, 277, 196, 276, 275, 198, 198, 199, 
	277, 8, 8, 276, 277, 0, 276, 275, 
	8, 8, 7, 9, 279, 7, 0, 8, 
	8, 7, 9, 280, 7, 0, 8, 8, 
	7, 9, 281, 7, 0, 8, 8, 7, 
	9, 282, 7, 0, 8, 8, 7, 9, 
	283, 7, 0, 8, 8, 7, 9, 284, 
	7, 0, 286, 286, 285, 9, 285, 0, 
	8, 8, 7, 9, 7, 287, 0, 8, 
	8, 7, 9, 288, 7, 0, 8, 8, 
	7, 9, 289, 7, 0, 8, 8, 7, 
	9, 290, 7, 0, 8, 8, 7, 9, 
	291, 7, 0, 8, 8, 7, 9, 292, 
	7, 0, 8, 8, 7, 9, 293, 7, 
	0, 8, 8, 7, 9, 294, 7, 0, 
	296, 296, 295, 9, 295, 0, 8, 8, 
	298, 299, 300, 298, 297, 195, 195, 298, 
	299, 196, 298, 297, 198, 198, 199, 299, 
	8, 8, 298, 299, 0, 298, 297, 8, 
	8, 7, 9, 301, 7, 0, 8, 8, 
	7, 9, 302, 7, 0, 8, 8, 7, 
	9, 303, 7, 0, 305, 305, 304, 9, 
	304, 0, 8, 8, 7, 9, 7, 306, 
	0, 8, 8, 7, 9, 7, 307, 0, 
	8, 8, 7, 9, 7, 308, 0, 8, 
	8, 7, 9, 7, 309, 0, 8, 8, 
	7, 9, 310, 7, 0, 8, 8, 7, 
	9, 311, 7, 0, 8, 8, 7, 9, 
	312, 7, 0, 8, 8, 7, 9, 313, 
	7, 0, 8, 8, 7, 9, 314, 7, 
	0, 8, 8, 7, 9, 315, 7, 0, 
	8, 8, 7, 9, 316, 7, 0, 8, 
	8, 7, 9, 317, 7, 0, 8, 8, 
	7, 9, 318, 7, 0, 8, 8, 7, 
	9, 319, 7, 0, 8, 8, 7, 9, 
	320, 7, 0, 8, 8, 7, 9, 321, 
	7, 0, 8, 8, 7, 9, 322, 7, 
	0, 8, 8, 7, 9, 323, 7, 0, 
	325, 325, 324, 9, 324, 0, 8, 8, 
	7, 9, 7, 326, 0, 328, 328, 327, 
	9, 327, 326, 0, 8, 8, 7, 9, 
	7, 329, 0, 331, 331, 330, 9, 330, 
	329, 0, 8, 8, 7, 9, 7, 332, 
	0, 334, 334, 333, 9, 333, 332, 0, 
	8, 8, 7, 9, 7, 335, 0, 337, 
	337, 336, 9, 336, 335, 0, 8, 8, 
	7, 9, 7, 338, 0, 339, 8, 8, 
	7, 9, 7, 0, 340, 8, 8, 7, 
	9, 7, 0, 8, 8, 7, 9, 341, 
	7, 0, 8, 8, 7, 9, 342, 7, 
	0, 8, 8, 7, 9, 343, 7, 0, 
	8, 8, 7, 9, 344, 7, 0, 8, 
	8, 7, 9, 345, 7, 0, 8, 8, 
	7, 9, 346, 7, 0, 348, 348, 347, 
	9, 347, 0, 8, 8, 350, 351, 352, 
	350, 349, 353, 353, 350, 351, 354, 350, 
	349, 353, 353, 355, 9, 354, 355, 0, 
	356, 356, 357, 351, 356, 356, 358, 357, 
	358, 9, 8, 8, 350, 351, 0, 350, 
	349, 8, 8, 7, 9, 359, 360, 7, 
	0, 8, 8, 7, 9, 361, 7, 0, 
	8, 8, 7, 9, 362, 7, 0, 364, 
	364, 363, 9, 363, 0, 8, 8, 7, 
	9, 7, 365, 0, 8, 8, 7, 9, 
	7, 366, 0, 8, 8, 7, 9, 7, 
	367, 0, 8, 8, 7, 9, 7, 368, 
	0, 370, 370, 369, 9, 369, 0, 8, 
	8, 372, 373, 374, 372, 371, 195, 195, 
	372, 373, 196, 372, 371, 198, 198, 199, 
	373, 8, 8, 372, 373, 0, 372, 371, 
	8, 8, 7, 9, 375, 7, 0, 8, 
	8, 7, 9, 376, 7, 0, 8, 8, 
	7, 9, 377, 7, 0, 379, 379, 378, 
	9, 378, 0, 8, 8, 7, 9, 7, 
	380, 0, 8, 8, 7, 9, 381, 7, 
	0, 8, 8, 7, 9, 1, 7, 0, 
	8, 8, 7, 9, 382, 7, 0, 8, 
	8, 7, 9, 383, 7, 0, 8, 8, 
	7, 9, 384, 7, 0, 8, 8, 7, 
	9, 385, 7, 0, 8, 8, 7, 9, 
	386, 7, 0, 8, 8, 7, 9, 387, 
	7, 0, 8, 8, 7, 9, 388, 7, 
	0, 8, 8, 7, 9, 389, 7, 0, 
	8, 8, 7, 9, 390, 7, 0, 8, 
	8, 7, 9, 391, 7, 0, 8, 8, 
	7, 9, 392, 7, 0, 394, 394, 393, 
	9, 393, 0, 8, 8, 396, 397, 398, 
	396, 395, 8, 8, 396, 397, 0, 396, 
	395, 8, 8, 7, 9, 399, 7, 0, 
	8, 8, 7, 9, 400, 7, 0, 8, 
	8, 7, 9, 401, 7, 0, 8, 8, 
	7, 9, 402, 7, 0, 8, 8, 7, 
	9, 403, 7, 0, 8, 8, 7, 9, 
	404, 7, 0, 8, 8, 7, 9, 405, 
	7, 0, 407, 407, 406, 9, 406, 0, 
	8, 8, 409, 410, 411, 409, 408, 195, 
	195, 409, 410, 196, 409, 408, 198, 198, 
	199, 410, 8, 8, 409, 410, 0, 409, 
	408, 8, 8, 7, 9, 412, 7, 412, 
	0, 414, 414, 413, 9, 412, 413, 412, 
	0, 414, 414, 413, 9, 413, 415, 0, 
	8, 8, 7, 9, 416, 7, 416, 0, 
	418, 418, 417, 9, 416, 417, 416, 0, 
	418, 418, 417, 9, 417, 0, 420, 420, 
	419, 9, 421, 419, 0, 8, 8, 7, 
	9, 422, 7, 0, 8, 8, 7, 9, 
	423, 7, 0, 8, 8, 7, 9, 424, 
	7, 0, 8, 8, 7, 9, 425, 7, 
	0, 427, 427, 426, 9, 426, 0, 427, 
	427, 426, 9, 426, 428, 0, 8, 8, 
	7, 9, 7, 0, 11, 11, 10, 9, 
	3, 6, 10, 0, 17, 17, 21, 22, 
	20, 21, 9, 2, 430, 2, 430, 429, 
	62, 62, 63, 63, 9, 57, 57, 59, 
	60, 59, 58, 8, 8, 7, 9, 7, 
	77, 0, 8, 8, 7, 9, 7, 83, 
	0, 95, 95, 94, 9, 94, 0, 8, 
	8, 7, 9, 7, 93, 0, 8, 8, 
	7, 9, 7, 103, 0, 114, 114, 113, 
	9, 113, 115, 0, 118, 118, 117, 9, 
	117, 119, 0, 114, 114, 113, 9, 113, 
	0, 134, 134, 133, 9, 133, 135, 0, 
	138, 138, 137, 9, 137, 139, 0, 134, 
	134, 133, 9, 133, 0, 157, 157, 156, 
	9, 156, 158, 0, 161, 161, 160, 9, 
	160, 162, 0, 157, 157, 156, 9, 156, 
	0, 8, 8, 182, 183, 182, 181, 195, 
	195, 197, 9, 196, 197, 0, 431, 431, 
	7, 9, 196, 7, 0, 198, 198, 200, 
	199, 200, 9, 199, 199, 199, 9, 8, 
	8, 192, 193, 194, 192, 191, 8, 8, 
	213, 214, 213, 212, 9, 9, 214, 8, 
	8, 7, 9, 7, 218, 0, 8, 8, 
	7, 9, 7, 229, 0, 249, 249, 248, 
	9, 248, 250, 0, 252, 252, 251, 9, 
	251, 253, 0, 255, 255, 254, 9, 254, 
	256, 0, 258, 258, 257, 9, 257, 259, 
	0, 8, 8, 7, 9, 7, 259, 0, 
	8, 8, 7, 9, 7, 269, 0, 8, 
	8, 276, 277, 278, 276, 275, 8, 8, 
	7, 9, 7, 287, 0, 8, 8, 298, 
	299, 300, 298, 297, 8, 8, 7, 9, 
	7, 306, 0, 8, 8, 7, 9, 7, 
	338, 0, 8, 8, 7, 9, 7, 335, 
	0, 8, 8, 7, 9, 7, 332, 0, 
	8, 8, 7, 9, 7, 329, 0, 8, 
	8, 7, 9, 7, 326, 0, 353, 353, 
	355, 9, 354, 355, 0, 432, 432, 7, 
	9, 354, 7, 0, 356, 356, 358, 357, 
	358, 9, 357, 357, 357, 9, 8, 8, 
	350, 351, 352, 350, 349, 8, 8, 372, 
	373, 374, 372, 371, 8, 8, 7, 9, 
	7, 365, 0, 8, 8, 7, 9, 7, 
	380, 0, 8, 8, 396, 397, 0, 396, 
	395, 9, 9, 9, 397, 8, 8, 396, 
	397, 398, 396, 395, 8, 8, 409, 410, 
	411, 409, 408, 430, 2, 433, 430, 429, 
	430, 2, 434, 430, 429, 430, 2, 435, 
	430, 429, 430, 2, 436, 430, 429, 437, 
	2, 437, 429, 439, 440, 429, 439, 438, 
	2, 440, 430, 2, 441, 430, 429, 430, 
	2, 442, 430, 429, 430, 2, 443, 430, 
	429, 430, 2, 444, 430, 429, 430, 2, 
	445, 430, 429, 430, 2, 446, 430, 429, 
	430, 2, 447, 430, 429, 430, 2, 448, 
	430, 429, 430, 2, 449, 430, 429, 430, 
	2, 450, 430, 429, 430, 2, 451, 430, 
	429, 430, 2, 452, 430, 429, 430, 2, 
	453, 430, 429, 430, 2, 454, 430, 429, 
	430, 2, 455, 430, 429, 414, 414, 413, 
	9, 413, 415, 0, 420, 420, 419, 9, 
	419, 0, 420, 420, 419, 9, 421, 419, 
	0, 427, 427, 426, 9, 426, 428, 0, 
	8, 8, 7, 9, 7, 428, 0, 0
};

static const short _parseSosiLine_trans_targs[] = {
	2, 3, 328, 4, 11, 312, 5, 2, 
	325, 0, 3, 326, 6, 6, 7, 6, 
	3, 327, 7, 8, 10, 8, 9, 329, 
	329, 328, 12, 383, 390, 393, 397, 401, 
	13, 159, 184, 207, 219, 227, 251, 253, 
	266, 284, 286, 300, 14, 40, 51, 58, 
	93, 113, 126, 15, 23, 16, 17, 18, 
	19, 331, 20, 19, 21, 20, 330, 22, 
	24, 25, 26, 27, 28, 35, 29, 30, 
	31, 32, 33, 34, 332, 332, 36, 37, 
	38, 39, 333, 325, 41, 42, 43, 44, 
	45, 46, 47, 48, 335, 49, 50, 334, 
	52, 53, 54, 55, 56, 57, 336, 336, 
	59, 76, 60, 61, 62, 63, 63, 339, 
	69, 64, 337, 65, 66, 67, 338, 68, 
	70, 71, 72, 73, 74, 75, 77, 78, 
	79, 80, 80, 342, 86, 81, 340, 82, 
	83, 84, 341, 85, 87, 88, 89, 90, 
	91, 92, 94, 95, 96, 97, 98, 99, 
	100, 100, 345, 106, 101, 343, 102, 103, 
	104, 344, 105, 107, 108, 109, 110, 111, 
	112, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 346, 124, 124, 125, 
	127, 137, 128, 129, 130, 131, 351, 132, 
	132, 134, 136, 347, 348, 133, 349, 350, 
	135, 138, 139, 140, 146, 149, 141, 142, 
	143, 144, 145, 352, 352, 352, 353, 147, 
	148, 354, 354, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 355, 355, 160, 175, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 325, 176, 
	177, 356, 178, 179, 357, 180, 181, 358, 
	182, 183, 359, 360, 185, 186, 187, 188, 
	191, 199, 189, 190, 361, 361, 192, 193, 
	194, 195, 362, 196, 196, 197, 198, 200, 
	201, 202, 203, 204, 205, 206, 363, 363, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	364, 216, 216, 217, 218, 220, 221, 222, 
	223, 365, 224, 225, 226, 325, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	238, 239, 240, 241, 242, 370, 243, 244, 
	369, 245, 246, 368, 247, 248, 367, 249, 
	250, 366, 366, 252, 2, 254, 255, 256, 
	257, 258, 259, 260, 375, 261, 261, 263, 
	265, 371, 372, 262, 373, 374, 264, 267, 
	279, 268, 269, 270, 377, 271, 272, 273, 
	274, 275, 376, 276, 276, 277, 278, 280, 
	281, 282, 283, 378, 378, 285, 287, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	297, 298, 381, 379, 379, 380, 299, 301, 
	302, 303, 304, 305, 306, 307, 308, 382, 
	309, 309, 310, 311, 313, 314, 405, 315, 
	316, 317, 406, 318, 407, 319, 320, 321, 
	322, 323, 324, 408, 409, 329, 329, 348, 
	372, 384, 385, 386, 387, 388, 388, 388, 
	389, 391, 392, 329, 394, 395, 396, 387, 
	398, 399, 400, 387, 402, 403, 404, 329
};

static const unsigned char _parseSosiLine_trans_actions[] = {
	0, 0, 0, 85, 65, 39, 83, 49, 
	49, 0, 49, 49, 83, 134, 83, 152, 
	87, 0, 152, 87, 83, 0, 85, 105, 
	149, 105, 65, 105, 105, 105, 105, 105, 
	0, 0, 0, 0, 0, 0, 65, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	49, 49, 103, 155, 103, 155, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 9, 0, 0, 
	0, 49, 49, 7, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 45, 49, 116, 
	0, 0, 0, 0, 0, 49, 49, 5, 
	0, 0, 0, 0, 0, 0, 49, 49, 
	0, 49, 49, 55, 55, 49, 49, 57, 
	0, 55, 55, 0, 57, 57, 0, 0, 
	0, 0, 49, 49, 0, 49, 49, 59, 
	59, 49, 49, 61, 0, 59, 59, 0, 
	61, 61, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 0, 49, 49, 69, 69, 
	49, 49, 71, 0, 69, 69, 0, 71, 
	71, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 79, 131, 79, 
	0, 0, 0, 0, 0, 49, 49, 93, 
	140, 93, 0, 49, 0, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 49, 49, 95, 143, 95, 0, 
	49, 49, 91, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 97, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	49, 49, 15, 49, 49, 13, 49, 49, 
	11, 49, 49, 17, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 21, 0, 0, 
	0, 49, 49, 23, 107, 23, 0, 0, 
	0, 0, 0, 0, 0, 49, 49, 25, 
	0, 0, 0, 0, 0, 0, 0, 49, 
	49, 99, 146, 99, 0, 0, 0, 0, 
	49, 49, 63, 63, 63, 63, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 31, 49, 
	49, 27, 49, 49, 33, 49, 49, 29, 
	49, 49, 35, 65, 65, 0, 0, 0, 
	0, 0, 0, 49, 49, 67, 125, 67, 
	0, 110, 1, 49, 1, 1, 0, 0, 
	0, 0, 0, 49, 49, 77, 77, 77, 
	77, 49, 49, 75, 128, 75, 0, 0, 
	0, 0, 49, 49, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 89, 137, 89, 0, 0, 
	0, 0, 0, 0, 0, 0, 49, 49, 
	37, 119, 37, 0, 39, 49, 49, 41, 
	41, 49, 113, 49, 113, 0, 0, 0, 
	0, 0, 49, 49, 43, 0, 49, 49, 
	110, 0, 0, 0, 19, 49, 53, 122, 
	53, 0, 0, 51, 0, 0, 0, 47, 
	0, 0, 0, 73, 0, 0, 0, 101
};

static const int parseSosiLine_start = 1;
static const int parseSosiLine_first_final = 325;
static const int parseSosiLine_error = 0;

static const int parseSosiLine_en_main = 1;


/* #line 27 "parser/parser_sosi_line.rl" */

    //! \endcond

}

void sosicon::Parser::
parseSosiLine( std::string sosiLine )
{
    int cs = 0;
    const char* s = sosiLine.c_str();
    const char* p = s;
    const char* pe = p + sosiLine.size();
    const char* eof = pe;

    
/* #line 1106 "parser_sosi_line.cpp" */
	{
	cs = parseSosiLine_start;
	}

/* #line 1111 "parser_sosi_line.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _parseSosiLine_trans_keys + _parseSosiLine_key_offsets[cs];
	_trans = _parseSosiLine_index_offsets[cs];

	_klen = _parseSosiLine_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _parseSosiLine_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _parseSosiLine_indicies[_trans];
	cs = _parseSosiLine_trans_targs[_trans];

	if ( _parseSosiLine_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _parseSosiLine_actions + _parseSosiLine_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 43 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement && 
                std::find( mObjTypeFilter.begin(),
                           mObjTypeFilter.end(),
                           mCurrentElement->getData( "objtype" ) ) != mObjTypeFilter.end() ) {
                mSosiElementsSelection.push_back( mCurrentElement );
            }           
        }
	break;
	case 1:
/* #line 52 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement && mHeadElement && !mHeadElement->getData( "enhet" ).empty() ) {
                float flUnit = 0.0, flNorth = 0.0, flEast = 0.0;
                std::stringstream ssUnit, ssNorth, ssEast;
                ssUnit  << mHeadElement->getData( "enhet" );
                ssNorth << mCurrentElement->getData( "koord_n" );
                ssEast  << mCurrentElement->getData( "koord_o" );
                if( ssUnit.good() && ssNorth.good() && ssEast.good() ) {
                    ssUnit   >> flUnit;
                    ssNorth  >> flNorth;
                    ssEast   >> flEast;
                    flNorth  *= flUnit;
                    flEast   *= flUnit;
                    std::stringstream ssNorth2, ssEast2;
                    ssNorth2.unsetf( std::stringstream::scientific );
                    ssNorth2.setf( std::stringstream::fixed );
                    ssNorth2.precision( 2 );
                    ssEast2.unsetf( std::stringstream::scientific );
                    ssEast2.setf( std::stringstream::fixed );
                    ssEast2.precision( 2 );
                    ssNorth2 << flNorth;
                    ssEast2  << flEast;
                    mCurrentElement->set( "koord_n", ssNorth2.str() );
                    mCurrentElement->set( "koord_o", ssEast2.str() );
                }
            }
        }
	break;
	case 2:
/* #line 80 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                ::sosicon::sosi::CoordSys c( mCurrentElement->getData( "koordsys" ) );
                mCurrentElement->set( "koordsys_srid",        c.getSrid()        );
                mCurrentElement->set( "koordsys_beskrivelse", c.getDescription() );
                mCurrentElement->set( "koordsys_datum",       c.getDatum()       );
                mCurrentElement->set( "koordsys_projeksjon",  c.getProjection()  );
                mCurrentElement->set( "koordsys_sone",        c.getZone()        );                
            }
        }
	break;
	case 3:
/* #line 91 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet", ' ' );
        }
	break;
	case 4:
/* #line 95 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_lopenummer", (*p) );
        }
	break;
	case 5:
/* #line 99 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_etasjeplan", (*p) );
        }
	break;
	case 6:
/* #line 103 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_etasjenummer", (*p) );
        }
	break;
	case 7:
/* #line 111 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_bokstav", (*p) );
        }
	break;
	case 8:
/* #line 115 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_husnr", (*p) );
        }
	break;
	case 9:
/* #line 119 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_gate", (*p) );
        }
	break;
	case 10:
/* #line 123 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_unr", (*p) );
        }
	break;
	case 11:
/* #line 127 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementArea();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 12:
/* #line 132 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggnr", (*p) );
        }
	break;
	case 13:
/* #line 136 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggstat", (*p) );
        }
	break;
	case 14:
/* #line 140 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggtyp_nbr", (*p) );
        }
	break;
	case 15:
/* #line 144 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_gardsnr", (*p) );
        }
	break;
	case 16:
/* #line 148 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_festenr", (*p) );
        }
	break;
	case 17:
/* #line 152 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_kommunenr", (*p) );
        }
	break;
	case 18:
/* #line 156 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_bruksnr", (*p) );
        }
	break;
	case 19:
/* #line 160 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_seksjonsnr", (*p) );
        }
	break;
	case 20:
/* #line 164 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "tegnsett", (*p) );
        }
	break;
	case 21:
/* #line 168 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_n", (*p) );
        }
	break;
	case 22:
/* #line 172 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_o", (*p) );
        }
	break;
	case 23:
/* #line 176 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_presisjon", (*p) );
        }
	break;
	case 24:
/* #line 180 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koordsys", (*p) );
        }
	break;
	case 25:
/* #line 184 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementCurve();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 26:
/* #line 189 "parser/parser_sosi_line.rl" */
	{
            
        }
	break;
	case 27:
/* #line 193 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new ::sosicon::sosi::SosiElementHead();
            mHeadElement = mCurrentElement;
        }
	break;
	case 28:
/* #line 198 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "id", (*p) );
        }
	break;
	case 29:
/* #line 202 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "max_n", (*p) );
        }
	break;
	case 30:
/* #line 206 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "max_o", (*p) );
        }
	break;
	case 31:
/* #line 210 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "min_n", (*p) );
        }
	break;
	case 32:
/* #line 214 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "min_o", (*p) );
        }
	break;
	case 33:
/* #line 218 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "komm", (*p) );
        }
	break;
	case 34:
/* #line 222 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "n_oe", (*p) );
        }
	break;
	case 35:
/* #line 226 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "objtype", (*p) );
        }
	break;
	case 36:
/* #line 230 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "origo_n", (*p) );
        }
	break;
	case 37:
/* #line 234 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                mCurrentElement->append( "origo_o", (*p) );
            }
        }
	break;
	case 38:
/* #line 240 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementPoint();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 39:
/* #line 245 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "post_sted", (*p) );
        }
	break;
	case 40:
/* #line 249 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "post_nr", (*p) );
        }
	break;
	case 41:
/* #line 253 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "produktspek", (*p) );
        }
	break;
	case 42:
/* #line 257 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ptema", (*p) );
        }
	break;
	case 43:
/* #line 261 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ref", (*p) );
        }
	break;
	case 44:
/* #line 271 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                mCurrentElement->set( "ref_invert", "1" );
            }
        }
	break;
	case 45:
/* #line 277 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                mCurrentElement->set( "ref_invert", "0" );
            }
        }
	break;
	case 46:
/* #line 283 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "sosi_versjon", (*p) );
        }
	break;
	case 47:
/* #line 287 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_id", (*p) );
        }
	break;
	case 48:
/* #line 291 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snavn", (*p) );
        }
	break;
	case 49:
/* #line 295 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snforek", (*p) );
        }
	break;
	case 50:
/* #line 299 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snregdato", (*p) );
        }
	break;
	case 51:
/* #line 303 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "gatenavn", (*p) );
        }
	break;
	case 52:
/* #line 307 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementText();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 53:
/* #line 312 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "enhet", (*p) );
        }
	break;
	case 54:
/* #line 316 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = 0;
        }
	break;
/* #line 1562 "parser_sosi_line.cpp" */
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

/* #line 458 "parser/parser_sosi_line.rl" */


};