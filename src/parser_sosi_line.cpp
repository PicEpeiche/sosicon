
/* #line 1 "parser/parser_sosi_line.rl" */
/*
 *  This file is part of the command-line tool sosicon.
 *  Copyright (C) 2012  Espen Andersen
 *
 *  This is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "parser.h"
#pragma warning ( disable: 4244 )

namespace sosicon {

    //! \cond 
    
/* #line 28 "parser_sosi_line.cpp" */
static const char _parseSosiLine_actions[] = {
	0, 1, 0, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 1, 30, 1, 31, 1, 32, 1, 
	33, 1, 34, 1, 35, 1, 36, 1, 
	37, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 2, 13, 26, 2, 26, 0, 2, 
	26, 1, 2, 26, 2, 2, 26, 20, 
	2, 26, 28, 2, 26, 35, 2, 26, 
	39, 2, 26, 41, 2, 26, 43, 2, 
	26, 44, 2, 26, 45, 2, 26, 47, 
	2, 26, 48, 2, 26, 50, 2, 26, 
	53, 2, 52, 26
};

static const short _parseSosiLine_key_offsets[] = {
	0, 0, 5, 11, 21, 39, 52, 60, 
	67, 74, 81, 87, 93, 99, 101, 106, 
	113, 120, 127, 134, 142, 149, 156, 163, 
	170, 177, 183, 191, 198, 205, 212, 218, 
	226, 233, 240, 247, 254, 261, 268, 275, 
	281, 289, 297, 303, 315, 322, 329, 336, 
	343, 349, 357, 365, 372, 379, 386, 392, 
	398, 406, 415, 424, 432, 441, 444, 449, 
	452, 458, 463, 466, 474, 481, 488, 495, 
	501, 507, 515, 524, 533, 541, 550, 553, 
	558, 561, 567, 572, 575, 583, 590, 597, 
	604, 611, 618, 625, 631, 637, 645, 654, 
	663, 671, 680, 683, 688, 691, 697, 702, 
	705, 713, 720, 727, 734, 741, 748, 755, 
	762, 769, 776, 783, 789, 795, 797, 805, 
	812, 819, 826, 832, 839, 846, 853, 856, 
	862, 869, 876, 883, 892, 899, 906, 913, 
	920, 926, 932, 939, 945, 953, 960, 967, 
	974, 981, 988, 995, 1002, 1009, 1015, 1023, 
	1031, 1038, 1045, 1052, 1059, 1066, 1073, 1080, 
	1087, 1094, 1101, 1108, 1115, 1122, 1129, 1136, 
	1143, 1149, 1157, 1165, 1173, 1181, 1189, 1195, 
	1203, 1210, 1217, 1224, 1233, 1240, 1246, 1254, 
	1261, 1268, 1275, 1281, 1288, 1295, 1298, 1305, 
	1312, 1319, 1326, 1333, 1340, 1347, 1353, 1361, 
	1368, 1375, 1382, 1389, 1396, 1403, 1410, 1416, 
	1423, 1430, 1433, 1440, 1447, 1454, 1461, 1467, 
	1475, 1483, 1491, 1499, 1506, 1513, 1520, 1527, 
	1534, 1541, 1548, 1555, 1562, 1569, 1576, 1583, 
	1590, 1597, 1603, 1611, 1619, 1627, 1635, 1643, 
	1651, 1659, 1667, 1675, 1682, 1689, 1696, 1703, 
	1710, 1717, 1724, 1731, 1737, 1744, 1751, 1758, 
	1761, 1767, 1774, 1782, 1789, 1796, 1802, 1810, 
	1818, 1826, 1834, 1840, 1847, 1854, 1857, 1864, 
	1871, 1878, 1885, 1891, 1899, 1906, 1913, 1920, 
	1925, 1926, 1933, 1940, 1947, 1954, 1961, 1968, 
	1975, 1982, 1989, 1996, 2003, 2009, 2016, 2023, 
	2030, 2037, 2044, 2051, 2058, 2065, 2072, 2078, 
	2085, 2092, 2095, 2102, 2111, 2120, 2128, 2137, 
	2146, 2152, 2159, 2166, 2173, 2180, 2187, 2193, 
	2201, 2206, 2207, 2213, 2213, 2217, 2222, 2228, 
	2236, 2244, 2250, 2258, 2266, 2274, 2282, 2288, 
	2296, 2304, 2310, 2318, 2326, 2332, 2338, 2345, 
	2352, 2358, 2361, 2368, 2374, 2376, 2384, 2392, 
	2400, 2408, 2416, 2424, 2432, 2440, 2447, 2455, 
	2462, 2470, 2478, 2486, 2494, 2502, 2510, 2517, 
	2524, 2530, 2533, 2540, 2547, 2555, 2563, 2570, 
	2576, 2578, 2580, 2583, 2586, 2589, 2594, 2600, 
	2607, 2614, 2621, 2627, 2634, 2637, 2644, 2651, 
	2656, 2661, 2666, 2671, 2675, 2680, 2681, 2686, 
	2691, 2696, 2701, 2706, 2711, 2716, 2721, 2726, 
	2731, 2736, 2741, 2746, 2751, 2756, 2764, 2770, 
	2777, 2785, 2793, 2798
};

static const char _parseSosiLine_trans_keys[] = {
	33, 46, 58, 48, 57, 10, 13, 32, 
	33, 9, 12, 32, 33, 46, 70, 72, 
	75, 80, 84, 9, 13, 10, 13, 32, 
	33, 46, 65, 66, 71, 75, 77, 78, 
	79, 80, 82, 83, 84, 9, 12, 10, 
	13, 32, 33, 69, 75, 76, 77, 79, 
	80, 83, 9, 12, 10, 13, 32, 33, 
	78, 84, 9, 12, 10, 13, 32, 33, 
	72, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 84, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 10, 13, 32, 
	9, 12, 10, 13, 32, 33, 65, 9, 
	12, 10, 13, 32, 33, 83, 9, 12, 
	10, 13, 32, 33, 74, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 78, 80, 9, 12, 10, 13, 
	32, 33, 85, 9, 12, 10, 13, 32, 
	33, 77, 9, 12, 10, 13, 32, 33, 
	77, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 82, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 76, 9, 12, 10, 13, 
	32, 33, 65, 9, 12, 10, 13, 32, 
	33, 78, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	65, 90, 10, 13, 32, 33, 79, 9, 
	12, 10, 13, 32, 33, 79, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 68, 9, 12, 10, 13, 
	32, 33, 83, 9, 12, 10, 13, 32, 
	33, 89, 9, 12, 10, 13, 32, 33, 
	83, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 65, 
	90, 97, 122, 10, 13, 32, 33, 80, 
	9, 12, 10, 13, 32, 33, 69, 9, 
	12, 10, 13, 32, 33, 78, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 65, 73, 9, 12, 10, 13, 32, 
	33, 88, 9, 12, 10, 13, 32, 33, 
	45, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 46, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 46, 9, 12, 48, 
	57, 32, 9, 13, 32, 9, 13, 48, 
	57, 46, 48, 57, 32, 46, 9, 13, 
	48, 57, 32, 9, 13, 48, 57, 46, 
	48, 57, 10, 13, 32, 46, 9, 12, 
	48, 57, 10, 13, 32, 33, 78, 9, 
	12, 10, 13, 32, 33, 45, 9, 12, 
	10, 13, 32, 33, 78, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 46, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	46, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 46, 9, 12, 48, 57, 32, 9, 
	13, 32, 9, 13, 48, 57, 46, 48, 
	57, 32, 46, 9, 13, 48, 57, 32, 
	9, 13, 48, 57, 46, 48, 57, 10, 
	13, 32, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 82, 9, 12, 10, 13, 
	32, 33, 73, 9, 12, 10, 13, 32, 
	33, 71, 9, 12, 10, 13, 32, 33, 
	79, 9, 12, 10, 13, 32, 33, 45, 
	9, 12, 10, 13, 32, 33, 78, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 46, 9, 12, 48, 57, 10, 13, 
	32, 33, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 46, 9, 12, 48, 57, 
	32, 9, 13, 32, 9, 13, 48, 57, 
	46, 48, 57, 32, 46, 9, 13, 48, 
	57, 32, 9, 13, 48, 57, 46, 48, 
	57, 10, 13, 32, 46, 9, 12, 48, 
	57, 10, 13, 32, 33, 82, 9, 12, 
	10, 13, 32, 33, 79, 9, 12, 10, 
	13, 32, 33, 68, 9, 12, 10, 13, 
	32, 33, 85, 9, 12, 10, 13, 32, 
	33, 75, 9, 12, 10, 13, 32, 33, 
	84, 9, 12, 10, 13, 32, 33, 83, 
	9, 12, 10, 13, 32, 33, 80, 9, 
	12, 10, 13, 32, 33, 69, 9, 12, 
	10, 13, 32, 33, 75, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 10, 13, 32, 
	33, 78, 83, 9, 12, 10, 13, 32, 
	33, 65, 9, 12, 10, 13, 32, 33, 
	86, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 34, 
	10, 13, 32, 34, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 82, 9, 12, 10, 13, 32, 33, 
	45, 9, 12, 10, 13, 32, 33, 70, 
	73, 83, 9, 12, 10, 13, 32, 33, 
	79, 9, 12, 10, 13, 32, 33, 82, 
	9, 12, 10, 13, 32, 33, 69, 9, 
	12, 10, 13, 32, 33, 75, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	68, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 78, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 71, 9, 12, 10, 13, 32, 
	33, 68, 9, 12, 10, 13, 32, 33, 
	65, 9, 12, 10, 13, 32, 33, 84, 
	9, 12, 10, 13, 32, 33, 79, 9, 
	12, 10, 13, 32, 33, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 68, 73, 9, 12, 10, 
	13, 32, 33, 82, 9, 12, 10, 13, 
	32, 33, 69, 9, 12, 10, 13, 32, 
	33, 83, 9, 12, 10, 13, 32, 33, 
	83, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 66, 9, 
	12, 10, 13, 32, 33, 82, 9, 12, 
	10, 13, 32, 33, 85, 9, 12, 10, 
	13, 32, 33, 75, 9, 12, 10, 13, 
	32, 33, 83, 9, 12, 10, 13, 32, 
	33, 69, 9, 12, 10, 13, 32, 33, 
	78, 9, 12, 10, 13, 32, 33, 72, 
	9, 12, 10, 13, 32, 33, 69, 9, 
	12, 10, 13, 32, 33, 84, 9, 12, 
	10, 13, 32, 33, 68, 9, 12, 10, 
	13, 32, 33, 9, 12, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 48, 57, 10, 13, 32, 
	33, 9, 12, 65, 90, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 89, 
	9, 12, 10, 13, 32, 33, 71, 9, 
	12, 10, 13, 32, 33, 71, 9, 12, 
	10, 13, 32, 33, 78, 83, 84, 9, 
	12, 10, 13, 32, 33, 82, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 84, 9, 12, 10, 13, 32, 
	33, 65, 9, 12, 10, 13, 32, 33, 
	84, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 34, 10, 13, 32, 33, 34, 9, 
	12, 10, 13, 32, 33, 89, 9, 12, 
	10, 13, 32, 33, 80, 9, 12, 10, 
	13, 32, 33, 95, 9, 12, 10, 13, 
	32, 33, 78, 9, 12, 10, 13, 32, 
	33, 66, 9, 12, 10, 13, 32, 33, 
	82, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 65, 9, 12, 
	10, 13, 32, 33, 84, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 78, 9, 12, 10, 13, 32, 
	33, 65, 9, 12, 10, 13, 32, 33, 
	86, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	34, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 79, 9, 12, 10, 
	13, 32, 33, 77, 9, 12, 10, 13, 
	32, 33, 77, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 65, 
	9, 12, 10, 13, 32, 33, 84, 9, 
	12, 10, 13, 32, 33, 82, 9, 12, 
	10, 13, 32, 33, 73, 9, 12, 10, 
	13, 32, 33, 75, 9, 12, 10, 13, 
	32, 33, 75, 9, 12, 10, 13, 32, 
	33, 69, 9, 12, 10, 13, 32, 33, 
	76, 9, 12, 10, 13, 32, 33, 78, 
	9, 12, 10, 13, 32, 33, 85, 9, 
	12, 10, 13, 32, 33, 77, 9, 12, 
	10, 13, 32, 33, 77, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 82, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, -61, 10, 13, 32, 33, 
	9, 12, -104, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 66, 9, 12, 
	10, 13, 32, 33, 74, 9, 12, 10, 
	13, 32, 33, 84, 9, 12, 10, 13, 
	32, 33, 89, 9, 12, 10, 13, 32, 
	33, 80, 9, 12, 10, 13, 32, 33, 
	69, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	34, 10, 13, 32, 34, 9, 12, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 79, 84, 9, 12, 10, 13, 
	32, 33, 83, 9, 12, 10, 13, 32, 
	33, 84, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	34, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 69, 9, 12, 10, 
	13, 32, 33, 77, 9, 12, 10, 13, 
	32, 33, 65, 9, 12, 10, 13, 32, 
	33, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 70, 9, 
	12, 10, 13, 32, 33, 58, 9, 12, 
	32, 33, 58, 9, 13, 58, 10, 13, 
	32, 33, 79, 9, 12, 10, 13, 32, 
	33, 83, 9, 12, 10, 13, 32, 33, 
	73, 9, 12, 10, 13, 32, 33, 45, 
	9, 12, 10, 13, 32, 33, 86, 9, 
	12, 10, 13, 32, 33, 69, 9, 12, 
	10, 13, 32, 33, 82, 9, 12, 10, 
	13, 32, 33, 83, 9, 12, 10, 13, 
	32, 33, 74, 9, 12, 10, 13, 32, 
	33, 79, 9, 12, 10, 13, 32, 33, 
	78, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 69, 9, 12, 10, 13, 
	32, 33, 71, 9, 12, 10, 13, 32, 
	33, 78, 9, 12, 10, 13, 32, 33, 
	83, 9, 12, 10, 13, 32, 33, 69, 
	9, 12, 10, 13, 32, 33, 84, 9, 
	12, 10, 13, 32, 33, 84, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 34, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 46, 9, 12, 48, 57, 10, 
	13, 32, 33, 46, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 46, 9, 12, 48, 
	57, 10, 13, 32, 33, 46, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 46, 9, 12, 10, 
	13, 32, 33, 46, 9, 12, 10, 13, 
	32, 33, 46, 9, 12, 10, 13, 32, 
	33, 75, 9, 12, 10, 13, 32, 33, 
	80, 9, 12, 10, 13, 32, 33, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 32, 33, 58, 9, 13, 58, 10, 
	13, 32, 33, 9, 12, 32, 33, 9, 
	13, 10, 13, 32, 9, 12, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	9, 12, 65, 90, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	48, 57, 10, 13, 32, 33, 9, 12, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 34, 9, 
	12, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 34, 9, 12, 10, 13, 
	34, 10, 13, 32, 33, 34, 9, 12, 
	10, 13, 32, 33, 9, 12, 10, 13, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 65, 90, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 9, 12, 48, 57, 
	10, 13, 32, 33, 34, 9, 12, 10, 
	13, 32, 33, 9, 12, 48, 57, 10, 
	13, 32, 33, 34, 9, 12, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 9, 12, 48, 57, 10, 13, 
	32, 33, 34, 9, 12, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 34, 
	9, 12, 10, 13, 34, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 9, 
	12, 48, 57, 10, 13, 32, 33, 58, 
	9, 12, 32, 33, 46, 58, 9, 13, 
	46, 58, 46, 58, 46, 58, 82, 46, 
	58, 69, 46, 58, 70, 32, 46, 58, 
	9, 13, 32, 33, 46, 58, 9, 13, 
	32, 33, 46, 58, 82, 9, 13, 32, 
	33, 46, 58, 69, 9, 13, 32, 33, 
	46, 58, 70, 9, 13, 32, 33, 46, 
	58, 9, 13, 10, 13, 32, 33, 34, 
	9, 12, 10, 13, 34, 10, 13, 32, 
	33, 34, 9, 12, 10, 13, 32, 33, 
	34, 9, 12, 32, 33, 76, 9, 13, 
	32, 33, 65, 9, 13, 32, 33, 84, 
	9, 13, 32, 33, 69, 9, 13, 32, 
	33, 9, 13, 32, 33, 58, 9, 13, 
	58, 32, 33, 79, 9, 13, 32, 33, 
	68, 9, 13, 32, 33, 69, 9, 13, 
	32, 33, 85, 9, 13, 32, 33, 82, 
	9, 13, 32, 33, 86, 9, 13, 32, 
	33, 69, 9, 13, 32, 33, 85, 9, 
	13, 32, 33, 78, 9, 13, 32, 33, 
	75, 9, 13, 32, 33, 84, 9, 13, 
	32, 33, 69, 9, 13, 32, 33, 75, 
	9, 13, 32, 33, 83, 9, 13, 32, 
	33, 84, 9, 13, 10, 13, 32, 33, 
	9, 12, 48, 57, 10, 13, 32, 33, 
	9, 12, 10, 13, 32, 33, 46, 9, 
	12, 10, 13, 32, 33, 9, 12, 48, 
	57, 10, 13, 32, 33, 9, 12, 48, 
	57, 32, 33, 58, 9, 13, 58, 0
};

static const char _parseSosiLine_single_lengths[] = {
	0, 3, 4, 8, 16, 11, 6, 5, 
	5, 5, 4, 4, 4, 2, 3, 5, 
	5, 5, 5, 6, 5, 5, 5, 5, 
	5, 4, 4, 5, 5, 5, 4, 4, 
	5, 5, 5, 5, 5, 5, 5, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	4, 4, 6, 5, 5, 5, 4, 4, 
	4, 5, 5, 4, 5, 1, 1, 1, 
	2, 1, 1, 4, 5, 5, 5, 4, 
	4, 4, 5, 5, 4, 5, 1, 1, 
	1, 2, 1, 1, 4, 5, 5, 5, 
	5, 5, 5, 4, 4, 4, 5, 5, 
	4, 5, 1, 1, 1, 2, 1, 1, 
	4, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 4, 4, 2, 6, 5, 
	5, 5, 4, 5, 5, 5, 3, 4, 
	5, 5, 5, 7, 5, 5, 5, 5, 
	4, 4, 5, 4, 4, 5, 5, 5, 
	5, 5, 5, 5, 5, 4, 4, 6, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	5, 5, 5, 7, 5, 4, 4, 5, 
	5, 5, 4, 5, 5, 3, 5, 5, 
	5, 5, 5, 5, 5, 4, 4, 5, 
	5, 5, 5, 5, 5, 5, 4, 5, 
	5, 3, 5, 5, 5, 5, 4, 4, 
	4, 4, 4, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 5, 5, 5, 5, 5, 
	5, 5, 5, 4, 5, 5, 5, 3, 
	4, 5, 6, 5, 5, 4, 4, 4, 
	4, 4, 4, 5, 5, 3, 5, 5, 
	5, 5, 4, 4, 5, 5, 5, 3, 
	1, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 4, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 4, 5, 
	5, 3, 5, 5, 5, 4, 5, 5, 
	4, 5, 5, 5, 5, 5, 4, 4, 
	3, 1, 4, 0, 2, 3, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 5, 5, 
	4, 3, 5, 4, 2, 4, 4, 4, 
	4, 4, 4, 4, 4, 5, 4, 5, 
	4, 4, 4, 4, 4, 4, 5, 5, 
	4, 3, 5, 5, 4, 4, 5, 4, 
	2, 2, 3, 3, 3, 3, 4, 5, 
	5, 5, 4, 5, 3, 5, 5, 3, 
	3, 3, 3, 2, 3, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 4, 5, 
	4, 4, 3, 1
};

static const char _parseSosiLine_range_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 1, 4, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	2, 2, 1, 2, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	1, 2, 2, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 1, 2, 1, 2, 2, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 1, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 0, 1, 0, 1, 1, 1, 2, 
	2, 1, 2, 2, 2, 2, 1, 2, 
	2, 1, 2, 2, 1, 1, 1, 1, 
	1, 0, 1, 1, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 0, 1, 1, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	2, 2, 1, 0
};

static const short _parseSosiLine_index_offsets[] = {
	0, 0, 5, 11, 21, 39, 52, 60, 
	67, 74, 81, 87, 93, 99, 102, 107, 
	114, 121, 128, 135, 143, 150, 157, 164, 
	171, 178, 184, 191, 198, 205, 212, 218, 
	225, 232, 239, 246, 253, 260, 267, 274, 
	280, 287, 294, 300, 309, 316, 323, 330, 
	337, 343, 350, 358, 365, 372, 379, 385, 
	391, 398, 406, 414, 421, 429, 432, 436, 
	439, 444, 448, 451, 458, 465, 472, 479, 
	485, 491, 498, 506, 514, 521, 529, 532, 
	536, 539, 544, 548, 551, 558, 565, 572, 
	579, 586, 593, 600, 606, 612, 619, 627, 
	635, 642, 650, 653, 657, 660, 665, 669, 
	672, 679, 686, 693, 700, 707, 714, 721, 
	728, 735, 742, 749, 755, 761, 764, 772, 
	779, 786, 793, 799, 806, 813, 820, 824, 
	830, 837, 844, 851, 860, 867, 874, 881, 
	888, 894, 900, 907, 913, 920, 927, 934, 
	941, 948, 955, 962, 969, 976, 982, 989, 
	997, 1004, 1011, 1018, 1025, 1032, 1039, 1046, 
	1053, 1060, 1067, 1074, 1081, 1088, 1095, 1102, 
	1109, 1115, 1122, 1129, 1136, 1143, 1150, 1156, 
	1163, 1170, 1177, 1184, 1193, 1200, 1206, 1213, 
	1220, 1227, 1234, 1240, 1247, 1254, 1258, 1265, 
	1272, 1279, 1286, 1293, 1300, 1307, 1313, 1320, 
	1327, 1334, 1341, 1348, 1355, 1362, 1369, 1375, 
	1382, 1389, 1393, 1400, 1407, 1414, 1421, 1427, 
	1434, 1441, 1448, 1455, 1462, 1469, 1476, 1483, 
	1490, 1497, 1504, 1511, 1518, 1525, 1532, 1539, 
	1546, 1553, 1559, 1566, 1573, 1580, 1587, 1594, 
	1601, 1608, 1615, 1622, 1629, 1636, 1643, 1650, 
	1657, 1664, 1671, 1678, 1684, 1691, 1698, 1705, 
	1709, 1715, 1722, 1730, 1737, 1744, 1750, 1757, 
	1764, 1771, 1778, 1784, 1791, 1798, 1802, 1809, 
	1816, 1823, 1830, 1836, 1843, 1850, 1857, 1864, 
	1869, 1871, 1878, 1885, 1892, 1899, 1906, 1913, 
	1920, 1927, 1934, 1941, 1948, 1954, 1961, 1968, 
	1975, 1982, 1989, 1996, 2003, 2010, 2017, 2023, 
	2030, 2037, 2041, 2048, 2056, 2064, 2071, 2079, 
	2087, 2093, 2100, 2107, 2114, 2121, 2128, 2134, 
	2141, 2146, 2148, 2154, 2155, 2159, 2164, 2170, 
	2177, 2184, 2190, 2197, 2204, 2211, 2218, 2224, 
	2231, 2238, 2244, 2251, 2258, 2264, 2270, 2277, 
	2284, 2290, 2294, 2301, 2307, 2310, 2317, 2324, 
	2331, 2338, 2345, 2352, 2359, 2366, 2373, 2380, 
	2387, 2394, 2401, 2408, 2415, 2422, 2429, 2436, 
	2443, 2449, 2453, 2460, 2467, 2474, 2481, 2488, 
	2494, 2497, 2500, 2504, 2508, 2512, 2517, 2523, 
	2530, 2537, 2544, 2550, 2557, 2561, 2568, 2575, 
	2580, 2585, 2590, 2595, 2599, 2604, 2606, 2611, 
	2616, 2621, 2626, 2631, 2636, 2641, 2646, 2651, 
	2656, 2661, 2666, 2671, 2676, 2681, 2688, 2694, 
	2701, 2708, 2715, 2720
};

static const short _parseSosiLine_indicies[] = {
	1, 2, 4, 3, 0, 6, 6, 5, 
	7, 5, 0, 9, 10, 11, 12, 13, 
	14, 15, 16, 9, 8, 6, 6, 5, 
	7, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 5, 0, 6, 
	6, 5, 7, 29, 30, 31, 32, 33, 
	34, 35, 5, 0, 6, 6, 5, 7, 
	36, 37, 5, 0, 6, 6, 5, 7, 
	38, 5, 0, 6, 6, 5, 7, 39, 
	5, 0, 6, 6, 5, 7, 40, 5, 
	0, 42, 42, 41, 7, 41, 0, 42, 
	42, 44, 45, 44, 43, 6, 6, 46, 
	45, 46, 43, 47, 47, 45, 47, 47, 
	48, 48, 7, 6, 6, 5, 7, 49, 
	5, 0, 6, 6, 5, 7, 50, 5, 
	0, 6, 6, 5, 7, 51, 5, 0, 
	6, 6, 5, 7, 52, 5, 0, 6, 
	6, 5, 7, 53, 54, 5, 0, 6, 
	6, 5, 7, 55, 5, 0, 6, 6, 
	5, 7, 56, 5, 0, 6, 6, 5, 
	7, 57, 5, 0, 6, 6, 5, 7, 
	58, 5, 0, 6, 6, 5, 7, 59, 
	5, 0, 61, 61, 60, 7, 60, 0, 
	6, 6, 5, 7, 5, 62, 0, 6, 
	6, 5, 7, 63, 5, 0, 6, 6, 
	5, 7, 64, 5, 0, 6, 6, 5, 
	7, 65, 5, 0, 67, 67, 66, 7, 
	66, 0, 6, 6, 5, 7, 5, 68, 
	0, 6, 6, 5, 7, 69, 5, 0, 
	6, 6, 5, 7, 70, 5, 0, 6, 
	6, 5, 7, 71, 5, 0, 6, 6, 
	5, 7, 72, 5, 0, 6, 6, 5, 
	7, 73, 5, 0, 6, 6, 5, 7, 
	74, 5, 0, 6, 6, 5, 7, 75, 
	5, 0, 77, 77, 76, 7, 76, 0, 
	6, 6, 5, 7, 5, 78, 0, 80, 
	80, 79, 7, 79, 78, 0, 80, 80, 
	79, 7, 79, 0, 6, 6, 5, 7, 
	5, 81, 81, 81, 0, 6, 6, 5, 
	7, 82, 5, 0, 6, 6, 5, 7, 
	83, 5, 0, 6, 6, 5, 7, 84, 
	5, 0, 6, 6, 5, 7, 85, 5, 
	0, 87, 87, 86, 7, 86, 0, 6, 
	6, 5, 7, 5, 88, 0, 6, 6, 
	5, 7, 89, 90, 5, 0, 6, 6, 
	5, 7, 91, 5, 0, 6, 6, 5, 
	7, 92, 5, 0, 6, 6, 5, 7, 
	93, 5, 0, 96, 96, 95, 97, 95, 
	94, 99, 99, 98, 7, 98, 0, 99, 
	99, 98, 7, 98, 100, 0, 6, 6, 
	5, 7, 101, 5, 101, 0, 103, 103, 
	102, 7, 101, 102, 101, 0, 103, 103, 
	102, 7, 102, 104, 0, 6, 6, 5, 
	7, 104, 5, 104, 0, 105, 105, 7, 
	105, 105, 106, 7, 107, 107, 7, 108, 
	107, 108, 107, 7, 108, 108, 109, 7, 
	110, 110, 7, 47, 47, 48, 110, 48, 
	110, 7, 6, 6, 5, 7, 111, 5, 
	0, 6, 6, 5, 7, 112, 5, 0, 
	6, 6, 5, 7, 113, 5, 0, 116, 
	116, 115, 117, 115, 114, 119, 119, 118, 
	7, 118, 0, 119, 119, 118, 7, 118, 
	120, 0, 6, 6, 5, 7, 121, 5, 
	121, 0, 123, 123, 122, 7, 121, 122, 
	121, 0, 123, 123, 122, 7, 122, 124, 
	0, 6, 6, 5, 7, 124, 5, 124, 
	0, 125, 125, 7, 125, 125, 126, 7, 
	127, 127, 7, 128, 127, 128, 127, 7, 
	128, 128, 129, 7, 130, 130, 7, 47, 
	47, 48, 130, 48, 130, 7, 6, 6, 
	5, 7, 131, 5, 0, 6, 6, 5, 
	7, 132, 5, 0, 6, 6, 5, 7, 
	133, 5, 0, 6, 6, 5, 7, 134, 
	5, 0, 6, 6, 5, 7, 135, 5, 
	0, 6, 6, 5, 7, 136, 5, 0, 
	139, 139, 138, 140, 138, 137, 142, 142, 
	141, 7, 141, 0, 142, 142, 141, 7, 
	141, 143, 0, 6, 6, 5, 7, 144, 
	5, 144, 0, 146, 146, 145, 7, 144, 
	145, 144, 0, 146, 146, 145, 7, 145, 
	147, 0, 6, 6, 5, 7, 147, 5, 
	147, 0, 148, 148, 7, 148, 148, 149, 
	7, 150, 150, 7, 151, 150, 151, 150, 
	7, 151, 151, 152, 7, 153, 153, 7, 
	47, 47, 48, 153, 48, 153, 7, 6, 
	6, 5, 7, 154, 5, 0, 6, 6, 
	5, 7, 155, 5, 0, 6, 6, 5, 
	7, 156, 5, 0, 6, 6, 5, 7, 
	157, 5, 0, 6, 6, 5, 7, 158, 
	5, 0, 6, 6, 5, 7, 159, 5, 
	0, 6, 6, 5, 7, 160, 5, 0, 
	6, 6, 5, 7, 161, 5, 0, 6, 
	6, 5, 7, 162, 5, 0, 6, 6, 
	5, 7, 163, 5, 0, 165, 165, 164, 
	7, 164, 0, 6, 6, 167, 168, 167, 
	166, 47, 47, 168, 6, 6, 5, 7, 
	169, 170, 5, 0, 6, 6, 5, 7, 
	171, 5, 0, 6, 6, 5, 7, 172, 
	5, 0, 6, 6, 5, 7, 173, 5, 
	0, 175, 175, 174, 7, 174, 0, 6, 
	6, 177, 178, 179, 177, 176, 180, 180, 
	177, 178, 181, 177, 176, 180, 180, 182, 
	7, 181, 182, 0, 183, 183, 184, 178, 
	183, 183, 185, 184, 185, 7, 6, 6, 
	177, 178, 0, 177, 176, 6, 6, 5, 
	7, 186, 5, 0, 6, 6, 5, 7, 
	187, 5, 0, 6, 6, 5, 7, 188, 
	189, 190, 5, 0, 6, 6, 5, 7, 
	191, 5, 0, 6, 6, 5, 7, 192, 
	5, 0, 6, 6, 5, 7, 193, 5, 
	0, 6, 6, 5, 7, 194, 5, 0, 
	196, 196, 195, 7, 195, 0, 6, 6, 
	198, 199, 198, 197, 6, 6, 5, 7, 
	200, 5, 0, 202, 202, 201, 7, 201, 
	0, 6, 6, 5, 7, 5, 203, 0, 
	6, 6, 5, 7, 204, 5, 0, 6, 
	6, 5, 7, 205, 5, 0, 6, 6, 
	5, 7, 206, 5, 0, 6, 6, 5, 
	7, 207, 5, 0, 6, 6, 5, 7, 
	208, 5, 0, 6, 6, 5, 7, 209, 
	5, 0, 6, 6, 5, 7, 210, 5, 
	0, 6, 6, 5, 7, 211, 5, 0, 
	213, 213, 212, 7, 212, 0, 6, 6, 
	5, 7, 5, 214, 0, 6, 6, 5, 
	7, 215, 216, 5, 0, 6, 6, 5, 
	7, 217, 5, 0, 6, 6, 5, 7, 
	218, 5, 0, 6, 6, 5, 7, 219, 
	5, 0, 6, 6, 5, 7, 220, 5, 
	0, 6, 6, 5, 7, 221, 5, 0, 
	6, 6, 5, 7, 222, 5, 0, 6, 
	6, 5, 7, 223, 5, 0, 6, 6, 
	5, 7, 224, 5, 0, 6, 6, 5, 
	7, 225, 5, 0, 6, 6, 5, 7, 
	226, 5, 0, 6, 6, 5, 7, 227, 
	5, 0, 6, 6, 5, 7, 228, 5, 
	0, 6, 6, 5, 7, 229, 5, 0, 
	6, 6, 5, 7, 230, 5, 0, 6, 
	6, 5, 7, 231, 5, 0, 6, 6, 
	5, 7, 232, 5, 0, 234, 234, 233, 
	7, 233, 0, 234, 234, 233, 7, 233, 
	235, 0, 237, 237, 236, 7, 236, 235, 
	0, 237, 237, 236, 7, 236, 238, 0, 
	240, 240, 239, 7, 239, 238, 0, 240, 
	240, 239, 7, 239, 241, 0, 243, 243, 
	242, 7, 242, 0, 243, 243, 242, 7, 
	242, 244, 0, 6, 6, 5, 7, 245, 
	5, 0, 6, 6, 5, 7, 246, 5, 
	0, 6, 6, 5, 7, 247, 5, 0, 
	6, 6, 5, 7, 248, 249, 250, 5, 
	0, 6, 6, 5, 7, 251, 5, 0, 
	253, 253, 252, 7, 252, 0, 6, 6, 
	5, 7, 5, 254, 0, 6, 6, 5, 
	7, 255, 5, 0, 6, 6, 5, 7, 
	256, 5, 0, 6, 6, 5, 7, 257, 
	5, 0, 259, 259, 258, 7, 258, 0, 
	6, 6, 261, 262, 263, 261, 260, 180, 
	180, 261, 262, 181, 261, 260, 183, 183, 
	184, 262, 6, 6, 261, 262, 0, 261, 
	260, 6, 6, 5, 7, 264, 5, 0, 
	6, 6, 5, 7, 265, 5, 0, 6, 
	6, 5, 7, 266, 5, 0, 6, 6, 
	5, 7, 267, 5, 0, 6, 6, 5, 
	7, 268, 5, 0, 6, 6, 5, 7, 
	269, 5, 0, 271, 271, 270, 7, 270, 
	0, 6, 6, 5, 7, 5, 272, 0, 
	6, 6, 5, 7, 273, 5, 0, 6, 
	6, 5, 7, 274, 5, 0, 6, 6, 
	5, 7, 275, 5, 0, 6, 6, 5, 
	7, 276, 5, 0, 6, 6, 5, 7, 
	277, 5, 0, 6, 6, 5, 7, 278, 
	5, 0, 6, 6, 5, 7, 279, 5, 
	0, 281, 281, 280, 7, 280, 0, 6, 
	6, 283, 284, 285, 283, 282, 180, 180, 
	283, 284, 181, 283, 282, 183, 183, 184, 
	284, 6, 6, 283, 284, 0, 283, 282, 
	6, 6, 5, 7, 286, 5, 0, 6, 
	6, 5, 7, 287, 5, 0, 6, 6, 
	5, 7, 288, 5, 0, 290, 290, 289, 
	7, 289, 0, 6, 6, 5, 7, 5, 
	291, 0, 6, 6, 5, 7, 5, 292, 
	0, 6, 6, 5, 7, 5, 293, 0, 
	6, 6, 5, 7, 5, 294, 0, 6, 
	6, 5, 7, 295, 5, 0, 6, 6, 
	5, 7, 296, 5, 0, 6, 6, 5, 
	7, 297, 5, 0, 6, 6, 5, 7, 
	298, 5, 0, 6, 6, 5, 7, 299, 
	5, 0, 6, 6, 5, 7, 300, 5, 
	0, 6, 6, 5, 7, 301, 5, 0, 
	6, 6, 5, 7, 302, 5, 0, 6, 
	6, 5, 7, 303, 5, 0, 6, 6, 
	5, 7, 304, 5, 0, 6, 6, 5, 
	7, 305, 5, 0, 6, 6, 5, 7, 
	306, 5, 0, 6, 6, 5, 7, 307, 
	5, 0, 6, 6, 5, 7, 308, 5, 
	0, 310, 310, 309, 7, 309, 0, 6, 
	6, 5, 7, 5, 311, 0, 313, 313, 
	312, 7, 312, 311, 0, 6, 6, 5, 
	7, 5, 314, 0, 316, 316, 315, 7, 
	315, 314, 0, 6, 6, 5, 7, 5, 
	317, 0, 319, 319, 318, 7, 318, 317, 
	0, 6, 6, 5, 7, 5, 320, 0, 
	322, 322, 321, 7, 321, 320, 0, 6, 
	6, 5, 7, 5, 323, 0, 324, 6, 
	6, 5, 7, 5, 0, 325, 6, 6, 
	5, 7, 5, 0, 6, 6, 5, 7, 
	326, 5, 0, 6, 6, 5, 7, 327, 
	5, 0, 6, 6, 5, 7, 328, 5, 
	0, 6, 6, 5, 7, 329, 5, 0, 
	6, 6, 5, 7, 330, 5, 0, 6, 
	6, 5, 7, 331, 5, 0, 333, 333, 
	332, 7, 332, 0, 6, 6, 335, 336, 
	337, 335, 334, 338, 338, 335, 336, 339, 
	335, 334, 338, 338, 340, 7, 339, 340, 
	0, 341, 341, 342, 336, 341, 341, 343, 
	342, 343, 7, 6, 6, 335, 336, 0, 
	335, 334, 6, 6, 5, 7, 344, 345, 
	5, 0, 6, 6, 5, 7, 346, 5, 
	0, 6, 6, 5, 7, 347, 5, 0, 
	349, 349, 348, 7, 348, 0, 6, 6, 
	5, 7, 5, 350, 0, 6, 6, 5, 
	7, 5, 351, 0, 6, 6, 5, 7, 
	5, 352, 0, 6, 6, 5, 7, 5, 
	353, 0, 355, 355, 354, 7, 354, 0, 
	6, 6, 357, 358, 359, 357, 356, 180, 
	180, 357, 358, 181, 357, 356, 183, 183, 
	184, 358, 6, 6, 357, 358, 0, 357, 
	356, 6, 6, 5, 7, 360, 5, 0, 
	6, 6, 5, 7, 361, 5, 0, 6, 
	6, 5, 7, 362, 5, 0, 364, 364, 
	363, 7, 363, 0, 6, 6, 5, 7, 
	5, 365, 0, 6, 6, 5, 7, 366, 
	5, 0, 6, 6, 5, 7, 367, 5, 
	0, 369, 369, 368, 7, 370, 368, 0, 
	372, 373, 0, 372, 371, 7, 373, 6, 
	6, 5, 7, 374, 5, 0, 6, 6, 
	5, 7, 375, 5, 0, 6, 6, 5, 
	7, 376, 5, 0, 6, 6, 5, 7, 
	377, 5, 0, 6, 6, 5, 7, 378, 
	5, 0, 6, 6, 5, 7, 379, 5, 
	0, 6, 6, 5, 7, 380, 5, 0, 
	6, 6, 5, 7, 381, 5, 0, 6, 
	6, 5, 7, 382, 5, 0, 6, 6, 
	5, 7, 383, 5, 0, 6, 6, 5, 
	7, 384, 5, 0, 386, 386, 385, 7, 
	385, 0, 6, 6, 388, 389, 390, 388, 
	387, 6, 6, 388, 389, 0, 388, 387, 
	6, 6, 5, 7, 391, 5, 0, 6, 
	6, 5, 7, 392, 5, 0, 6, 6, 
	5, 7, 393, 5, 0, 6, 6, 5, 
	7, 394, 5, 0, 6, 6, 5, 7, 
	395, 5, 0, 6, 6, 5, 7, 396, 
	5, 0, 6, 6, 5, 7, 397, 5, 
	0, 399, 399, 398, 7, 398, 0, 6, 
	6, 401, 402, 403, 401, 400, 180, 180, 
	401, 402, 181, 401, 400, 183, 183, 184, 
	402, 6, 6, 401, 402, 0, 401, 400, 
	6, 6, 5, 7, 404, 5, 404, 0, 
	406, 406, 405, 7, 404, 405, 404, 0, 
	406, 406, 405, 7, 405, 407, 0, 6, 
	6, 5, 7, 408, 5, 408, 0, 410, 
	410, 409, 7, 408, 409, 408, 0, 410, 
	410, 409, 7, 409, 0, 412, 412, 411, 
	7, 413, 411, 0, 6, 6, 5, 7, 
	414, 5, 0, 6, 6, 5, 7, 415, 
	5, 0, 6, 6, 5, 7, 416, 5, 
	0, 6, 6, 5, 7, 417, 5, 0, 
	419, 419, 418, 7, 418, 0, 419, 419, 
	418, 7, 418, 420, 0, 422, 423, 0, 
	422, 421, 7, 423, 6, 6, 5, 7, 
	5, 0, 1, 425, 1, 425, 424, 47, 
	47, 48, 48, 7, 42, 42, 44, 45, 
	44, 43, 6, 6, 5, 7, 5, 62, 
	0, 6, 6, 5, 7, 5, 68, 0, 
	80, 80, 79, 7, 79, 0, 6, 6, 
	5, 7, 5, 78, 0, 6, 6, 5, 
	7, 5, 88, 0, 99, 99, 98, 7, 
	98, 100, 0, 103, 103, 102, 7, 102, 
	104, 0, 99, 99, 98, 7, 98, 0, 
	119, 119, 118, 7, 118, 120, 0, 123, 
	123, 122, 7, 122, 124, 0, 119, 119, 
	118, 7, 118, 0, 142, 142, 141, 7, 
	141, 143, 0, 146, 146, 145, 7, 145, 
	147, 0, 142, 142, 141, 7, 141, 0, 
	6, 6, 167, 168, 167, 166, 180, 180, 
	182, 7, 181, 182, 0, 426, 426, 5, 
	7, 181, 5, 0, 183, 183, 185, 184, 
	185, 7, 184, 184, 184, 7, 6, 6, 
	177, 178, 179, 177, 176, 6, 6, 198, 
	199, 198, 197, 7, 7, 199, 6, 6, 
	5, 7, 5, 203, 0, 6, 6, 5, 
	7, 5, 214, 0, 234, 234, 233, 7, 
	233, 235, 0, 237, 237, 236, 7, 236, 
	238, 0, 240, 240, 239, 7, 239, 241, 
	0, 243, 243, 242, 7, 242, 244, 0, 
	6, 6, 5, 7, 5, 244, 0, 6, 
	6, 5, 7, 5, 254, 0, 6, 6, 
	261, 262, 263, 261, 260, 6, 6, 5, 
	7, 5, 272, 0, 6, 6, 283, 284, 
	285, 283, 282, 6, 6, 5, 7, 5, 
	291, 0, 6, 6, 5, 7, 5, 323, 
	0, 6, 6, 5, 7, 5, 320, 0, 
	6, 6, 5, 7, 5, 317, 0, 6, 
	6, 5, 7, 5, 314, 0, 6, 6, 
	5, 7, 5, 311, 0, 338, 338, 340, 
	7, 339, 340, 0, 427, 427, 5, 7, 
	339, 5, 0, 341, 341, 343, 342, 343, 
	7, 342, 342, 342, 7, 6, 6, 335, 
	336, 337, 335, 334, 6, 6, 357, 358, 
	359, 357, 356, 6, 6, 5, 7, 5, 
	350, 0, 6, 6, 5, 7, 5, 365, 
	0, 369, 369, 368, 7, 370, 368, 0, 
	372, 373, 428, 0, 372, 371, 429, 7, 
	373, 430, 7, 373, 430, 7, 431, 373, 
	429, 7, 432, 373, 429, 7, 433, 373, 
	433, 429, 434, 433, 373, 372, 373, 435, 
	0, 372, 371, 372, 373, 435, 0, 436, 
	372, 371, 372, 373, 428, 0, 437, 372, 
	371, 372, 373, 428, 0, 438, 372, 371, 
	439, 373, 428, 370, 439, 371, 6, 6, 
	388, 389, 0, 388, 387, 7, 7, 7, 
	389, 6, 6, 388, 389, 390, 388, 387, 
	6, 6, 401, 402, 403, 401, 400, 425, 
	1, 440, 425, 424, 425, 1, 441, 425, 
	424, 425, 1, 442, 425, 424, 425, 1, 
	443, 425, 424, 444, 1, 444, 424, 446, 
	447, 424, 446, 445, 1, 447, 425, 1, 
	448, 425, 424, 425, 1, 449, 425, 424, 
	425, 1, 450, 425, 424, 425, 1, 451, 
	425, 424, 425, 1, 452, 425, 424, 425, 
	1, 453, 425, 424, 425, 1, 454, 425, 
	424, 425, 1, 455, 425, 424, 425, 1, 
	456, 425, 424, 425, 1, 457, 425, 424, 
	425, 1, 458, 425, 424, 425, 1, 459, 
	425, 424, 425, 1, 460, 425, 424, 425, 
	1, 461, 425, 424, 425, 1, 462, 425, 
	424, 406, 406, 405, 7, 405, 407, 0, 
	412, 412, 411, 7, 411, 0, 412, 412, 
	411, 7, 413, 411, 0, 419, 419, 418, 
	7, 418, 420, 0, 6, 6, 5, 7, 
	5, 420, 0, 422, 423, 4, 422, 421, 
	463, 423, 0
};

static const short _parseSosiLine_trans_targs[] = {
	2, 323, 3, 307, 320, 2, 322, 0, 
	324, 324, 323, 4, 391, 398, 401, 405, 
	409, 5, 151, 176, 199, 211, 219, 243, 
	245, 258, 276, 281, 295, 6, 32, 43, 
	50, 85, 105, 118, 7, 15, 8, 9, 
	10, 11, 326, 12, 11, 13, 12, 325, 
	14, 16, 17, 18, 19, 20, 27, 21, 
	22, 23, 24, 25, 26, 327, 327, 28, 
	29, 30, 31, 328, 322, 33, 34, 35, 
	36, 37, 38, 39, 40, 330, 41, 42, 
	329, 44, 45, 46, 47, 48, 49, 331, 
	331, 51, 68, 52, 53, 54, 55, 55, 
	334, 61, 56, 332, 57, 58, 59, 333, 
	60, 62, 63, 64, 65, 66, 67, 69, 
	70, 71, 72, 72, 337, 78, 73, 335, 
	74, 75, 76, 336, 77, 79, 80, 81, 
	82, 83, 84, 86, 87, 88, 89, 90, 
	91, 92, 92, 340, 98, 93, 338, 94, 
	95, 96, 339, 97, 99, 100, 101, 102, 
	103, 104, 106, 107, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 341, 116, 116, 
	117, 119, 129, 120, 121, 122, 123, 346, 
	124, 124, 126, 128, 342, 343, 125, 344, 
	345, 127, 130, 131, 132, 138, 141, 133, 
	134, 135, 136, 137, 347, 347, 347, 348, 
	139, 140, 349, 349, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 350, 350, 152, 
	167, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 322, 
	168, 169, 351, 170, 171, 352, 172, 173, 
	353, 174, 175, 354, 355, 177, 178, 179, 
	180, 183, 191, 181, 182, 356, 356, 184, 
	185, 186, 187, 357, 188, 188, 189, 190, 
	192, 193, 194, 195, 196, 197, 198, 358, 
	358, 200, 201, 202, 203, 204, 205, 206, 
	207, 359, 208, 208, 209, 210, 212, 213, 
	214, 215, 360, 216, 217, 218, 322, 220, 
	221, 222, 223, 224, 225, 226, 227, 228, 
	229, 230, 231, 232, 233, 234, 365, 235, 
	236, 364, 237, 238, 363, 239, 240, 362, 
	241, 242, 361, 361, 244, 2, 246, 247, 
	248, 249, 250, 251, 252, 370, 253, 253, 
	255, 257, 366, 367, 254, 368, 369, 256, 
	259, 271, 260, 261, 262, 372, 263, 264, 
	265, 266, 267, 371, 268, 268, 269, 270, 
	272, 273, 274, 275, 373, 373, 277, 278, 
	278, 374, 279, 375, 375, 376, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	292, 293, 389, 387, 387, 388, 294, 296, 
	297, 298, 299, 300, 301, 302, 303, 390, 
	304, 304, 305, 306, 308, 309, 413, 310, 
	311, 312, 414, 313, 415, 314, 315, 316, 
	317, 318, 319, 416, 417, 418, 418, 419, 
	324, 324, 343, 367, 382, 377, 378, 379, 
	380, 381, 280, 383, 384, 385, 386, 386, 
	392, 393, 394, 395, 396, 396, 396, 397, 
	399, 400, 324, 402, 403, 404, 395, 406, 
	407, 408, 395, 410, 411, 412, 324, 321
};

static const unsigned char _parseSosiLine_trans_actions[] = {
	0, 0, 65, 39, 85, 49, 49, 0, 
	103, 150, 103, 65, 103, 103, 103, 103, 
	103, 0, 0, 0, 0, 0, 0, 65, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 101, 153, 101, 153, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 9, 0, 
	0, 0, 49, 49, 7, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 45, 49, 
	114, 0, 0, 0, 0, 0, 49, 49, 
	5, 0, 0, 0, 0, 0, 0, 49, 
	49, 0, 49, 49, 55, 55, 49, 49, 
	57, 0, 55, 55, 0, 57, 57, 0, 
	0, 0, 0, 49, 49, 0, 49, 49, 
	59, 59, 49, 49, 61, 0, 59, 59, 
	0, 61, 61, 0, 0, 0, 0, 0, 
	0, 0, 49, 49, 0, 49, 49, 69, 
	69, 49, 49, 71, 0, 69, 69, 0, 
	71, 71, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 79, 129, 
	79, 0, 0, 0, 0, 0, 49, 49, 
	91, 141, 91, 0, 49, 0, 49, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 49, 93, 144, 93, 
	0, 49, 49, 89, 0, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 95, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 49, 49, 15, 49, 49, 13, 49, 
	49, 11, 49, 49, 17, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 21, 0, 
	0, 0, 49, 49, 23, 105, 23, 0, 
	0, 0, 0, 0, 0, 0, 49, 49, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	49, 49, 97, 147, 97, 0, 0, 0, 
	0, 49, 49, 63, 63, 63, 63, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 49, 49, 31, 
	49, 49, 27, 49, 49, 33, 49, 49, 
	29, 49, 49, 35, 65, 65, 0, 0, 
	0, 0, 0, 0, 49, 49, 67, 123, 
	67, 0, 108, 1, 49, 1, 1, 0, 
	0, 0, 0, 0, 49, 49, 77, 77, 
	77, 77, 49, 49, 75, 126, 75, 0, 
	0, 0, 0, 49, 49, 81, 0, 0, 
	49, 49, 83, 83, 132, 83, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 87, 138, 87, 0, 0, 
	0, 0, 0, 0, 0, 0, 49, 49, 
	37, 117, 37, 0, 39, 49, 49, 41, 
	41, 49, 111, 49, 111, 0, 0, 0, 
	0, 0, 49, 49, 43, 85, 135, 85, 
	0, 49, 49, 108, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 132, 
	0, 0, 0, 19, 49, 53, 120, 53, 
	0, 0, 51, 0, 0, 0, 47, 0, 
	0, 0, 73, 0, 0, 0, 99, 85
};

static const int parseSosiLine_start = 1;
static const int parseSosiLine_first_final = 322;
static const int parseSosiLine_error = 0;

static const int parseSosiLine_en_main = 1;


/* #line 27 "parser/parser_sosi_line.rl" */

    //! \endcond

}

void sosicon::Parser::
parseSosiLine( std::string sosiLine )
{
    int cs = 0;
    const char* s = sosiLine.c_str();
    const char* p = s;
    const char* pe = p + sosiLine.size();
    const char* eof = pe;

    
/* #line 1118 "parser_sosi_line.cpp" */
	{
	cs = parseSosiLine_start;
	}

/* #line 1123 "parser_sosi_line.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _parseSosiLine_trans_keys + _parseSosiLine_key_offsets[cs];
	_trans = _parseSosiLine_index_offsets[cs];

	_klen = _parseSosiLine_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _parseSosiLine_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _parseSosiLine_indicies[_trans];
	cs = _parseSosiLine_trans_targs[_trans];

	if ( _parseSosiLine_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _parseSosiLine_actions + _parseSosiLine_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 43 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement && 
                std::find( mObjTypeFilter.begin(),
                           mObjTypeFilter.end(),
                           mCurrentElement->getData( "objtype" ) ) != mObjTypeFilter.end() ) {
                mSosiElementsSelection.push_back( mCurrentElement );
            }           
        }
	break;
	case 1:
/* #line 52 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement && mHeadElement && !mHeadElement->getData( "enhet" ).empty() ) {
                float flUnit = 0.0, flNorth = 0.0, flEast = 0.0;
                std::stringstream ssUnit, ssNorth, ssEast;
                ssUnit  << mHeadElement->getData( "enhet" );
                ssNorth << mCurrentElement->getData( "koord_n" );
                ssEast  << mCurrentElement->getData( "koord_o" );
                if( ssUnit.good() && ssNorth.good() && ssEast.good() ) {
                    ssUnit   >> flUnit;
                    ssNorth  >> flNorth;
                    ssEast   >> flEast;
                    flNorth  *= flUnit;
                    flEast   *= flUnit;
                    std::stringstream ssNorth2, ssEast2;
                    ssNorth2.unsetf( std::stringstream::scientific );
                    ssNorth2.setf( std::stringstream::fixed );
                    ssNorth2.precision( 2 );
                    ssEast2.unsetf( std::stringstream::scientific );
                    ssEast2.setf( std::stringstream::fixed );
                    ssEast2.precision( 2 );
                    ssNorth2 << flNorth;
                    ssEast2  << flEast;
                    mCurrentElement->set( "koord_n", ssNorth2.str() );
                    mCurrentElement->set( "koord_o", ssEast2.str() );
                }
            }
        }
	break;
	case 2:
/* #line 80 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                ::sosicon::sosi::CoordSys c( mCurrentElement->getData( "koordsys" ) );
                mCurrentElement->set( "koordsys_srid",        c.getSrid()        );
                mCurrentElement->set( "koordsys_beskrivelse", c.getDescription() );
                mCurrentElement->set( "koordsys_datum",       c.getDatum()       );
                mCurrentElement->set( "koordsys_projeksjon",  c.getProjection()  );
                mCurrentElement->set( "koordsys_sone",        c.getZone()        );                
            }
        }
	break;
	case 3:
/* #line 91 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet", ' ' );
        }
	break;
	case 4:
/* #line 95 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_lopenummer", (*p) );
        }
	break;
	case 5:
/* #line 99 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_etasjeplan", (*p) );
        }
	break;
	case 6:
/* #line 103 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "adressebruksenhet_etasjenummer", (*p) );
        }
	break;
	case 7:
/* #line 111 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_bokstav", (*p) );
        }
	break;
	case 8:
/* #line 115 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_husnr", (*p) );
        }
	break;
	case 9:
/* #line 119 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_gate", (*p) );
        }
	break;
	case 10:
/* #line 123 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "aid_unr", (*p) );
        }
	break;
	case 11:
/* #line 127 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementArea();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 12:
/* #line 132 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggnr", (*p) );
        }
	break;
	case 13:
/* #line 136 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggstat", (*p) );
        }
	break;
	case 14:
/* #line 140 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "byggtyp_nbr", (*p) );
        }
	break;
	case 15:
/* #line 144 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_gardsnr", (*p) );
        }
	break;
	case 16:
/* #line 148 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_festenr", (*p) );
        }
	break;
	case 17:
/* #line 152 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_kommunenr", (*p) );
        }
	break;
	case 18:
/* #line 156 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_bruksnr", (*p) );
        }
	break;
	case 19:
/* #line 160 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "matrikkelnummer_seksjonsnr", (*p) );
        }
	break;
	case 20:
/* #line 164 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "tegnsett", (*p) );
        }
	break;
	case 21:
/* #line 168 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_n", (*p) );
        }
	break;
	case 22:
/* #line 172 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_o", (*p) );
        }
	break;
	case 23:
/* #line 176 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koord_presisjon", (*p) );
        }
	break;
	case 24:
/* #line 180 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "koordsys", (*p) );
        }
	break;
	case 25:
/* #line 184 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementCurve();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 26:
/* #line 189 "parser/parser_sosi_line.rl" */
	{
            
        }
	break;
	case 27:
/* #line 193 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new ::sosicon::sosi::SosiElementHead();
            mHeadElement = mCurrentElement;
        }
	break;
	case 28:
/* #line 198 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "id", (*p) );
        }
	break;
	case 29:
/* #line 202 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "max_n", (*p) );
        }
	break;
	case 30:
/* #line 206 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "max_o", (*p) );
        }
	break;
	case 31:
/* #line 210 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "min_n", (*p) );
        }
	break;
	case 32:
/* #line 214 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "min_o", (*p) );
        }
	break;
	case 33:
/* #line 218 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "komm", (*p) );
        }
	break;
	case 34:
/* #line 222 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "n_oe", (*p) );
        }
	break;
	case 35:
/* #line 226 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "objtype", (*p) );
        }
	break;
	case 36:
/* #line 230 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "origo_n", (*p) );
        }
	break;
	case 37:
/* #line 234 "parser/parser_sosi_line.rl" */
	{
            if( mCurrentElement ) {
                mCurrentElement->append( "origo_o", (*p) );
            }
        }
	break;
	case 38:
/* #line 240 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementPoint();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 39:
/* #line 245 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "post_sted", (*p) );
        }
	break;
	case 40:
/* #line 249 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "post_nr", (*p) );
        }
	break;
	case 41:
/* #line 253 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "produktspek", (*p) );
        }
	break;
	case 42:
/* #line 257 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ptema", (*p) );
        }
	break;
	case 43:
/* #line 261 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ref", (*p) );
        }
	break;
	case 44:
/* #line 265 "parser/parser_sosi_line.rl" */
	{
            if( "ref" == mCurrentElementField ) {
                appendElementFieldChar( "ref", (*p) );
            }
        }
	break;
	case 45:
/* #line 271 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "sosi_versjon", (*p) );
        }
	break;
	case 46:
/* #line 275 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_id", (*p) );
        }
	break;
	case 47:
/* #line 279 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snavn", (*p) );
        }
	break;
	case 48:
/* #line 283 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snforek", (*p) );
        }
	break;
	case 49:
/* #line 287 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "ssr_snregdato", (*p) );
        }
	break;
	case 50:
/* #line 291 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "gatenavn", (*p) );
        }
	break;
	case 51:
/* #line 295 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = new sosicon::sosi::SosiElementText();
            mSosiElements.push_back( mCurrentElement );
        }
	break;
	case 52:
/* #line 300 "parser/parser_sosi_line.rl" */
	{
            appendElementFieldChar( "enhet", (*p) );
        }
	break;
	case 53:
/* #line 304 "parser/parser_sosi_line.rl" */
	{
            mCurrentElement = 0;
        }
	break;
/* #line 1566 "parser_sosi_line.cpp" */
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

/* #line 446 "parser/parser_sosi_line.rl" */


};